filtered_data <- data %>%
filter(event_name %in% visit) %>%
select(record_id, event_name, repeat_instrument, repeat_instance, all_of(filtered_vars)) %>%
mutate(
repeat_instrument = ifelse(is.na(repeat_instrument), "", repeat_instrument),
repeat_instance = ifelse(repeat_instrument == "", NA, repeat_instance)
)
return(filtered_data)
}
filter_data("eleg_arm_1,0")
filter_data("eleg_arm_1",0)
filter_data("eleg_arm_1", include_repeating = 0)
# Step 3: Create a function to filter the raw data based on the selected variables and event_name
filter_data <- function(visit = c("eleg_arm_1", "V1", "V2", "V3"), include_repeating = NULL) {
# Get the filtered variable names using the filter_variables function
filtered_vars <- filter_variables(visit, include_repeating)
# Filter the raw data to only include these columns and match event_name
filtered_data <- data %>%
filter(event_name %in% visit) %>%
filter(if (!is.null(include_repeating) && include_repeating == 0) is.na(repeat_instrument) | repeat_instrument == "" else TRUE) %>%
filter(if (!is.null(include_repeating) && include_repeating == 1) !is.na(repeat_instrument) & repeat_instrument != "" else TRUE) %>%
select(record_id, event_name, repeat_instrument, repeat_instance, all_of(filtered_vars)) %>%
mutate(
repeat_instrument = ifelse(is.na(repeat_instrument), "", repeat_instrument),
repeat_instance = ifelse(repeat_instrument == "", NA, repeat_instance)
)
return(filtered_data)
}
filter_data("eleg_arm_1", include_repeating = 0)
filter_data("eleg_arm_1", include_repeating = 1)
filter_data("eleg_arm_1")
filter_data("V1",0)
filter_data("V1", 0)
filter_data("1visit_arm_1", 0)
filter_data("V1", 0)
# Clear existing data and graphics
rm(list=ls())
graphics.off()
cat("\014")  # Clear any pending RStudio sessions or temporary files
# Load necessary libraries
library(Hmisc)
library(tidyverse)
# Set working directory
setwd("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP")
data  <- read_csv(
"data_dvep.csv",
col_names = TRUE,
col_types = NULL,
col_select = NULL,
id = NULL,
locale = default_locale(),
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
quote = "\"",
comment = "",
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000,
name_repair = "unique",
num_threads = readr_threads(),
progress = show_progress(),
show_col_types = TRUE,
skip_empty_rows = TRUE,
lazy = should_read_lazy()
)
# Remove identifying name from record_id
data$record_id <- substr(data$record_id,1,2)
data_codebook <- read_csv(
"data_codebook.csv",
col_names = TRUE,
col_types = NULL,
col_select = NULL,
id = NULL,
locale = default_locale(),
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
quote = "\"",
comment = "",
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000,
name_repair = "unique",
num_threads = readr_threads(),
progress = show_progress(),
show_col_types = TRUE,
skip_empty_rows = TRUE,
lazy = should_read_lazy()
)
data_structure  <- read_csv(
"data_structure.csv",
col_names = TRUE)
data_NCIT  <- read_csv(
"data_NCIT.csv",
col_names = TRUE)
View(data_codebook)
View(data)
# Step 3: Create a function to filter the variables based on visit and repeating instrument status
filter_variables <- function(visit = c("eleg", "V1", "V2", "V3"), include_repeating = NULL) {
# Ensure the visit input is valid
if (!all(visit %in% c("eleg", "V1", "V2", "V3"))) {
stop("Invalid visit name. Choose from 'eleg', 'V1', 'V2', or 'V3'.")
}
# Filter codebook for included variables, by visit, and by repeating instrument status if specified
filtered_codebook <- data_codebook %>%
filter(
included == 1,
rowSums(select(., all_of(visit))) > 0,  # At least one of the selected visits should have a 1
if (!is.null(include_repeating)) repeating_instrument == include_repeating else TRUE
)
# Return the filtered variable names
filtered_vars <- filtered_codebook$variable
return(filtered_vars)
}
filter_variables("eleg")
filter_variables("eleg",0)
filter_variables("eleg",1)
filter_variables("V1",0)
filter_variables("V1",1)
filter_variables("V1")
filter_variables("V2")
filter_variables("V2",1)
filter_variables("V2",0)
filter_variables("V3")
filter_variables("V3",1)
filter_variables("V3",0)
filter_variables("V3")
# Step 4: Create a function to filter the raw data based on the selected variables and event_name
filter_data <- function(visit = c("eleg", "V1", "V2", "V3"), include_repeating = NULL) {
# Map visit names to actual event_name values
mapped_visits <- case_when(
visit == "eleg" ~ "eleg_arm_1",
visit == "V1" ~ "1visit_arm_1",
visit == "V2" ~ "2visit_arm_1",
visit == "V3" ~ "3visit_arm_1",
TRUE ~ visit
)
# Get the filtered variable names using the filter_variables function
filtered_vars <- filter_variables(visit, include_repeating)
# Filter the raw data to only include these columns and match event_name
filtered_data <- data %>%
filter(event_name %in% mapped_visits) %>%
filter(if (!is.null(include_repeating) && include_repeating == 0) is.na(repeat_instrument) | repeat_instrument == "" else TRUE) %>%
filter(if (!is.null(include_repeating) && include_repeating == 1) !is.na(repeat_instrument) & repeat_instrument != "" else TRUE) %>%
select(record_id, event_name, repeat_instrument, repeat_instance, all_of(filtered_vars)) %>%
mutate(
repeat_instrument = ifelse(is.na(repeat_instrument), "", repeat_instrument),
repeat_instance = ifelse(repeat_instrument == "", NA, repeat_instance)
)
return(filtered_data)
}
filter_data("V1",0)
## Create rename vector
rename_vector <- setNames(object = colnames(data), data_codebook$variable)
## Apply  rename vector to data
data <- data |>
rename(!!!rename_vector)
rm(rename_vector)
filter_data("V1",0)
filter_data("eleg",0)
filter_data("V2",0)
filter_data("V1",0)
filter_data("V2",0)
filter_data("V3",0)
filter_data("V3",1)
filter_data("V3")
View(data_structure)
View(data_codebook)
data_codebook |> form_name_en
data_codebook$form_name_en
data_codebook |>
distinct(form_name_en)
print(n=40)
print(
data_codebook$form_name_en,
n = 40)
View(data_codebook)
# Step 3: Create a function to filter the variables based on visit, form, and repeating instrument status
filter_variables <- function(visit = c("eleg", "V1", "V2", "V3"), include_repeating = NULL, form_name = NULL) {
# Ensure the visit input is valid
if (!all(visit %in% c("eleg", "V1", "V2", "V3"))) {
stop("Invalid visit name. Choose from 'eleg', 'V1', 'V2', or 'V3'.")
}
# Ensure the form_name input is valid
valid_form_names <- c("elegibility", "allocation", "demographic", "whoqol", "dass", "ecap", "evs", "alcohol",
"tobacco", "eliminations", "diet_recall", "intake", "measures", "bp_limb", "bp", "bia",
"handgrip", "dates", "conditions", "drugs", "old.drugs", "history", "medical",
"symptoms", "phy.exam", "labs", "ecg", "compliance", "events", "followup",
"conclusion", "annex", "tcle", "allergies")
if (!is.null(form_name) && !all(form_name %in% valid_form_names)) {
stop("Invalid form_name. Choose from: ", paste(valid_form_names, collapse = ", "))
}
# Filter codebook for included variables, by visit, form, and repeating instrument status if specified
filtered_codebook <- data_codebook %>%
filter(
included == 1,
rowSums(select(., all_of(visit))) > 0,  # At least one of the selected visits should have a 1
if (!is.null(include_repeating)) repeating_instrument == include_repeating else TRUE,
if (!is.null(form_name)) form_name_en == form_name else TRUE
)
# Return the filtered variable names
filtered_vars <- filtered_codebook$variable
return(filtered_vars)
}
filter_variables("eleg",0,"eleg")
filter_variables(library(tidyverse)
# Step 1: Load the raw data and the codebook
data <- read_csv("data_dvep.csv")
filter_variables <- function(visit = c("eleg", "V1", "V2", "V3"), include_repeating = NULL, form_name = c("elegibility", "allocation", "demographic", "whoqol", "dass", "ecap", "evs", "alcohol", "tobacco", "eliminations", "diet_recall", "intake", "measures", "bp_limb", "bp", "bia", "handgrip", "dates", "conditions", "drugs", "old.drugs", "history", "medical",
"symptoms", "phy.exam", "labs", "ecg", "compliance", "events", "followup", "conclusion", "annex", "tcle", "allergies", NULL)) {
# Ensure the visit input is valid
if (!all(visit %in% c("eleg", "V1", "V2", "V3"))) {
stop("Invalid visit name. Choose from 'eleg', 'V1', 'V2', or 'V3'.")
}
# Ensure the form_name input is valid
valid_form_names <- c("elegibility", "allocation", "demographic", "whoqol", "dass", "ecap", "evs", "alcohol",
"tobacco", "eliminations", "diet_recall", "intake", "measures", "bp_limb", "bp", "bia",
"handgrip", "dates", "conditions", "drugs", "old.drugs", "history", "medical",
"symptoms", "phy.exam", "labs", "ecg", "compliance", "events", "followup",
"conclusion", "annex", "tcle", "allergies")
if (!is.null(form_name) && !all(form_name %in% valid_form_names)) {
stop("Invalid form_name. Choose from: ", paste(valid_form_names, collapse = ", "))
}
filter_variables <- function(visit = c("eleg", "V1", "V2", "V3"), include_repeating = NULL, form_name = c("elegibility", "allocation", "demographic", "whoqol", "dass", "ecap", "evs", "alcohol",
"tobacco", "eliminations", "diet_recall", "intake", "measures", "bp_limb", "bp", "bia",
"handgrip", "dates", "conditions", "drugs", "old.drugs", "history", "medical",
"symptoms", "phy.exam", "labs", "ecg", "compliance", "events", "followup",
"conclusion", "annex", "tcle", "allergies", NULL)) {
# Ensure the visit input is valid
if (!all(visit %in% c("eleg", "V1", "V2", "V3"))) {
stop("Invalid visit name. Choose from 'eleg', 'V1', 'V2', or 'V3'.")
}
# Ensure the form_name input is valid
valid_form_names <- c("elegibility", "allocation", "demographic", "whoqol", "dass", "ecap", "evs", "alcohol",
"tobacco", "eliminations", "diet_recall", "intake", "measures", "bp_limb", "bp", "bia",
"handgrip", "dates", "conditions", "drugs", "old.drugs", "history", "medical",
"symptoms", "phy.exam", "labs", "ecg", "compliance", "events", "followup",
"conclusion", "annex", "tcle", "allergies")
if (!is.null(form_name) && !all(form_name %in% valid_form_names)) {
stop("Invalid form_name. Choose from: ", paste(valid_form_names, collapse = ", "))
}
filter_variables("eleg",0,"followup")
# Step 3: Create a function to filter the variables based on visit, form, and repeating instrument status
filter_variables <- function(visit = c("eleg", "V1", "V2", "V3"), include_repeating = NULL, form_name = NULL) {
# Ensure the visit input is valid
if (!all(visit %in% c("eleg", "V1", "V2", "V3"))) {
stop("Invalid visit name. Choose from 'eleg', 'V1', 'V2', or 'V3'.")
}
# Ensure the form_name input is valid
valid_form_names <- c("elegibility", "allocation", "demographic", "whoqol", "dass", "ecap", "evs", "alcohol",
"tobacco", "eliminations", "diet_recall", "intake", "measures", "bp_limb", "bp", "bia",
"handgrip", "dates", "conditions", "drugs", "old.drugs", "history", "medical",
"symptoms", "phy.exam", "labs", "ecg", "compliance", "events", "followup",
"conclusion", "annex", "tcle", "allergies")
if (!is.null(form_name) && !all(form_name %in% valid_form_names)) {
stop("Invalid form_name. Choose from: ", paste(valid_form_names, collapse = ", "))
}
# Filter codebook for included variables, by visit, form, and repeating instrument status if specified
filtered_codebook <- data_codebook %>%
filter(
included == 1,
rowSums(select(., all_of(visit))) > 0,  # At least one of the selected visits should have a 1
if (!is.null(include_repeating)) repeating_instrument == include_repeating else TRUE,
if (!is.null(form_name)) form_name_en == form_name else TRUE
)
# Return the filtered variable names
filtered_vars <- filtered_codebook$variable
return(filtered_vars)
}
filter_variables("eleg",0)
filter_variables("V1",0,"labs")
filter_variables("V1",,"labs")
filter_variables(,,"labs")
filter_variables(,,"followup")
filter_variables(,,"measures")
# Clear existing data and graphics
rm(list=ls())
graphics.off()
cat("\014")  # Clear any pending RStudio sessions or temporary files
# Load necessary libraries
library(Hmisc)
library(tidyverse)
# Set working directory
setwd("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP")
data  <- read_csv(
"data_dvep.csv",
col_names = TRUE,
col_types = NULL,
col_select = NULL,
id = NULL,
locale = default_locale(),
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
quote = "\"",
comment = "",
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000,
name_repair = "unique",
num_threads = readr_threads(),
progress = show_progress(),
show_col_types = TRUE,
skip_empty_rows = TRUE,
lazy = should_read_lazy()
)
# Remove identifying name from record_id
data$record_id <- substr(data$record_id,1,2)
data_codebook <- read_csv(
"data_codebook.csv",
col_names = TRUE,
col_types = NULL,
col_select = NULL,
id = NULL,
locale = default_locale(),
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
quote = "\"",
comment = "",
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000,
name_repair = "unique",
num_threads = readr_threads(),
progress = show_progress(),
show_col_types = TRUE,
skip_empty_rows = TRUE,
lazy = should_read_lazy()
)
data_structure  <- read_csv(
"data_structure.csv",
col_names = TRUE)
data_NCIT  <- read_csv(
"data_NCIT.csv",
col_names = TRUE)
filter_variables <- function(visit = c("eleg", "V1", "V2", "V3"), include_repeating = NULL, form_name = NULL) {
# Ensure the visit input is valid
if (!all(visit %in% c("eleg", "V1", "V2", "V3"))) {
stop("Invalid visit name. Choose from 'eleg', 'V1', 'V2', or 'V3'.")
}
# Ensure the form_name input is valid
valid_form_names <- c("elegibility", "allocation", "demographic", "whoqol", "dass", "ecap", "evs", "alcohol",
"tobacco", "eliminations", "diet_recall", "intake", "measures", "bp_limb", "bp", "bia",
"handgrip", "dates", "conditions", "drugs", "old.drugs", "history", "medical",
"symptoms", "phy.exam", "labs", "ecg", "compliance", "events", "followup",
"conclusion", "annex", "tcle", "allergies")
if (!is.null(form_name) && !all(form_name %in% valid_form_names)) {
stop("Invalid form_name. Choose from: ", paste(valid_form_names, collapse = ", "))
}
# Filter codebook for included variables, by visit, form, and repeating instrument status if specified
filtered_codebook <- data_codebook %>%
filter(
included == 1,
rowSums(select(., all_of(visit))) > 0,  # At least one of the selected visits should have a 1
if (!is.null(include_repeating)) repeating_instrument == include_repeating else TRUE,
if (!is.null(form_name)) form_name_en == form_name else TRUE
)
# Return the filtered variable names
filtered_vars <- filtered_codebook$variable
return(filtered_vars)
}
filter_variables(,,"measures")
filter_variables("V1,0")
filter_variables("V1",0)
# Step 4: Create a function to filter the raw data based on the selected variables, event_name, and form
filter_data <- function(visit = c("eleg", "V1", "V2", "V3"), include_repeating = NULL, form_name = NULL) {
# Map visit names to actual event_name values
mapped_visits <- case_when(
visit == "eleg" ~ "eleg_arm_1",
visit == "V1" ~ "1visit_arm_1",
visit == "V2" ~ "2visit_arm_1",
visit == "V3" ~ "3visit_arm_1",
TRUE ~ visit
)
# Get the filtered variable names using the filter_variables function
filtered_vars <- filter_variables(visit, include_repeating, form_name)
# Filter the raw data to only include these columns and match event_name
filtered_data <- data %>%
filter(event_name %in% mapped_visits) %>%
filter(if (!is.null(include_repeating) && include_repeating == 0) is.na(repeat_instrument) | repeat_instrument == "" else TRUE) %>%
filter(if (!is.null(include_repeating) && include_repeating == 1) !is.na(repeat_instrument) & repeat_instrument != "" else TRUE) %>%
select(record_id, event_name, repeat_instrument, repeat_instance, all_of(filtered_vars)) %>%
mutate(
repeat_instrument = ifelse(is.na(repeat_instrument), "", repeat_instrument),
repeat_instance = ifelse(repeat_instrument == "", NA, repeat_instance)
)
return(filtered_data)
}
filter_data("V1","labs")
filter_data("V1",,"labs")
# Clear existing data and graphics
rm(list=ls())
graphics.off()
cat("\014")  # Clear any pending RStudio sessions or temporary files
# Load necessary libraries
library(Hmisc)
library(tidyverse)
# Set working directory
setwd("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP")
data  <- read_csv(
"data_dvep.csv",
col_names = TRUE,
col_types = NULL,
col_select = NULL,
id = NULL,
locale = default_locale(),
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
quote = "\"",
comment = "",
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000,
name_repair = "unique",
num_threads = readr_threads(),
progress = show_progress(),
show_col_types = TRUE,
skip_empty_rows = TRUE,
lazy = should_read_lazy()
)
# Remove identifying name from record_id
data$record_id <- substr(data$record_id,1,2)
data_codebook <- read_csv(
"data_codebook.csv",
col_names = TRUE,
col_types = NULL,
col_select = NULL,
id = NULL,
locale = default_locale(),
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
quote = "\"",
comment = "",
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000,
name_repair = "unique",
num_threads = readr_threads(),
progress = show_progress(),
show_col_types = TRUE,
skip_empty_rows = TRUE,
lazy = should_read_lazy()
)
data_structure  <- read_csv(
"data_structure.csv",
col_names = TRUE)
data_NCIT  <- read_csv(
"data_NCIT.csv",
col_names = TRUE)
# Renaming variables
## Create rename vector
rename_vector <- setNames(object = colnames(data), data_codebook$variable)
## Apply  rename vector to data
data <- data |>
rename(!!!rename_vector)
rm(rename_vector)
# Step 3: Create a function to filter the variables based on visit, form, and repeating instrument status
filter_variables <- function(visit = c("eleg", "V1", "V2", "V3"), include_repeating = NULL, form_name = NULL) {
# Ensure the visit input is valid
if (!all(visit %in% c("eleg", "V1", "V2", "V3"))) {
stop("Invalid visit name. Choose from 'eleg', 'V1', 'V2', or 'V3'.")
}
# Ensure the form_name input is valid
valid_form_names <- c("elegibility", "allocation", "demographic", "whoqol", "dass", "ecap", "evs", "alcohol",
"tobacco", "eliminations", "diet_recall", "intake", "measures", "bp_limb", "bp", "bia",
"handgrip", "dates", "conditions", "drugs", "old.drugs", "history", "medical",
"symptoms", "phy.exam", "labs", "ecg", "compliance", "events", "followup",
"conclusion", "annex", "tcle", "allergies")
if (!is.null(form_name) && !all(form_name %in% valid_form_names)) {
stop("Invalid form_name. Choose from: ", paste(valid_form_names, collapse = ", "))
}
# Filter codebook for included variables, by visit, form, and repeating instrument status if specified
filtered_codebook <- data_codebook %>%
filter(
included == 1,
rowSums(select(., all_of(visit))) > 0,  # At least one of the selected visits should have a 1
if (!is.null(include_repeating)) repeating_instrument == include_repeating else TRUE,
if (!is.null(form_name)) form_name_en == form_name else TRUE
)
# Return the filtered variable names
filtered_vars <- filtered_codebook$variable
return(filtered_vars)
}
# Step 4: Create a function to filter the raw data based on the selected variables, event_name, and form
filter_data <- function(visit = c("eleg", "V1", "V2", "V3"), include_repeating = NULL, form_name = NULL) {
# Map visit names to actual event_name values
mapped_visits <- case_when(
visit == "eleg" ~ "eleg_arm_1",
visit == "V1" ~ "1visit_arm_1",
visit == "V2" ~ "2visit_arm_1",
visit == "V3" ~ "3visit_arm_1",
TRUE ~ visit
)
# Get the filtered variable names using the filter_variables function
filtered_vars <- filter_variables(visit, include_repeating, form_name)
# Filter the raw data to only include these columns and match event_name
filtered_data <- data %>%
filter(event_name %in% mapped_visits) %>%
filter(if (!is.null(include_repeating) && include_repeating == 0) is.na(repeat_instrument) | repeat_instrument == "" else TRUE) %>%
filter(if (!is.null(include_repeating) && include_repeating == 1) !is.na(repeat_instrument) & repeat_instrument != "" else TRUE) %>%
select(record_id, event_name, repeat_instrument, repeat_instance, all_of(filtered_vars)) %>%
mutate(
repeat_instrument = ifelse(is.na(repeat_instrument), "", repeat_instrument),
repeat_instance = ifelse(repeat_instrument == "", NA, repeat_instance)
)
return(filtered_data)
}
filter_data("V1,,"labs")
filter_data("V1,1,"labs")
filter_data("V1",1,"labs")
# Clear existing data and graphics
rm(list=ls())
graphics.off()
cat("\014")  # Clear any pending RStudio sessions or temporary files
