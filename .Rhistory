ungroup()
}) %>%
bind_rows()
} else {
# For ungrouped data
summary <- lapply(categorical_cols, function(col) {
data %>%
count(!!sym(col), .drop = FALSE, name = "Freq") %>%
mutate(
Percent = round(100 * Freq / sum(Freq), 1),
Variable = variable_labels[col] # Use labels or names
) %>%
rename(Level = !!sym(col))
}) %>%
bind_rows()
}
# Arrange columns for consistency
summary <- summary %>%
select(Variable, Level, Freq, Percent, everything())
return(summary)
}
compare_groups <- function(data, group_col = "allocation_group", use_labels = TRUE) {
# Extract variable labels, default to variable names if labels are missing
# If use_labels = TRUE, fetch the 'label' attribute for each variable.
# If no label exists or use_labels = FALSE, default to the variable name.
variable_labels <- sapply(names(data), function(var) {
label <- attr(data[[var]], "label") # Check for the 'label' attribute
if (is.null(label) || !use_labels) var else label # Use variable name if label is missing
}, simplify = TRUE)
# Prepare results storage
# Create an empty data.frame to store test results with predefined columns
results <- data.frame(
Variable = character(), # The variable being tested
Test = character(),     # The type of test (t-test or chi-squared/Fisher's)
Statistic = numeric(),  # The test statistic value
P_value = numeric(),    # The p-value from the test
stringsAsFactors = FALSE # Ensure strings are not converted to factors
)
# Loop through all columns in the data, excluding the grouping column
for (var in setdiff(names(data), group_col)) {
if (is.numeric(data[[var]])) {
# Run t-test for numeric variables
# Compares the means of the variable between the groups in group_col
test_result <- t.test(data[[var]] ~ data[[group_col]])
# Append the t-test results to the results data.frame
results <- rbind(results, data.frame(
Variable = variable_labels[var], # Use label or name
Test = "t-test",                 # Specify the test type
Statistic = round(test_result$statistic, 2), # Round the t-statistic
P_value = round(test_result$p.value, 4)     # Round the p-value
))
} else if (is.factor(data[[var]]) || is.character(data[[var]])) {
# Run chi-squared test for categorical variables
# Create a contingency table for the variable and the group_col
contingency_table <- table(data[[var]], data[[group_col]])
# Check expected counts to decide between chi-squared and Fisher's test
if (any(chisq.test(contingency_table)$expected < 5)) {
# Use Fisher's exact test when expected counts are too small
test_result <- fisher.test(contingency_table)
# Append the Fisher's exact test results to the results data.frame
results <- rbind(results, data.frame(
Variable = variable_labels[var], # Use label or name
Test = "Fisher's exact test",    # Specify the test type
Statistic = NA,                  # No statistic for Fisher's test
P_value = round(test_result$p.value, 4) # Round the p-value
))
} else {
# Use chi-squared test when expected counts are sufficient
test_result <- tryCatch(
chisq.test(contingency_table), # Perform the chi-squared test
error = function(e) list(statistic = NA, p.value = NA) # Handle potential errors
)
# Append the chi-squared test results to the results data.frame
results <- rbind(results, data.frame(
Variable = variable_labels[var], # Use label or name
Test = "Chi-squared test",       # Specify the test type
Statistic = round(test_result$statistic, 2), # Round the chi-squared statistic
P_value = round(test_result$p.value, 4)     # Round the p-value
))
}
}
}
# Return results as a gt table
# Convert the results data.frame into a gt table for better visualization
gt_table <- results %>%
gt() %>%
tab_header(
title = "Hypothesis Test Results",       # Main title for the table
subtitle = paste("Comparison of", group_col) # Subtitle indicating the grouping variable
) %>%
cols_label(
Variable = "Variable",          # Rename the Variable column
Test = "Test Type",             # Rename the Test column
Statistic = "Test Statistic",   # Rename the Statistic column
P_value = "P-value"             # Rename the P_value column
)
return(gt_table) # Return the formatted gt table
}
library(skimr)
# 1. Getting started with R
## Clear existing data and graphics
rm(list = ls())
graphics.off()
cat("\014")  # Clear any pending RStudio sessions or temporary files
## Load necessary libraries
library(tidyverse)
library(readxl)
library(lubridate)
library(stringr)
library(purrr)
library(gt)
library(jmv)
library(skimr)
## Set working directory
setwd("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP")
# 2. Read CSV data files (Tidyverse)
codebook_dvep <- read_excel(
"Data/codebook_dvep.xlsx",
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
# 2. Read CSV data files (Tidyverse)
codebook_dvep <- read_excel(
"Data/codebook_dvep.xlsx",
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
codebook_bia <- read_excel(
"Data/codebook_bia.xlsx",
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
codebook_structure  <- read_csv(
"Data/codebook_structure.csv",
col_names = TRUE) |>
select(
form_name_en:V3
)
codebook_ncit  <- read_csv(
"Data/codebook_ncit.csv",
col_names = TRUE)
data  <- read_csv(
"Data/data_dvep.csv",
col_names = TRUE,
col_types = NULL,
col_select = NULL,
id = NULL,
locale = default_locale(),
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
quote = "\"",
comment = "",
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000,
name_repair = "unique",
num_threads = readr_threads(),
progress = show_progress(),
show_col_types = TRUE,
skip_empty_rows = TRUE,
lazy = should_read_lazy()
)
data_bia_D3 <- read_csv(
"Data/data_bia_D3.csv",
col_names = TRUE)
data_bia_D1 <- read_csv(
"Data/data_bia_D1.csv",
col_names = TRUE)
# 1. Getting started with R
## Clear existing data and graphics
rm(list = ls())
graphics.off()
cat("\014")  # Clear any pending RStudio sessions or temporary files
## Load necessary libraries
library(tidyverse)
library(readxl)
library(lubridate)
library(stringr)
library(purrr)
library(gt)
library(jmv)
library(skimr)
## Set working directory
setwd("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP")
# 1. Getting started with R
## Clear existing data and graphics
rm(list = ls())
graphics.off()
cat("\014")  # Clear any pending RStudio sessions or temporary files
## Load necessary libraries
library(tidyverse)
library(readxl)
library(lubridate)
library(stringr)
library(purrr)
library(gt)
library(jmv)
library(skimr)
## Set working directory
setwd("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP")
# 1. Getting started with R
## Clear existing data and graphics
rm(list = ls())
graphics.off()
cat("\014")  # Clear any pending RStudio sessions or temporary files
## Load necessary libraries
library(tidyverse)
library(readxl)
library(lubridate)
library(stringr)
library(purrr)
library(gt)
library(jmv)
library(skimr)
## Set working directory
setwd("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP")
# 2. Read CSV data files (Tidyverse)
codebook_dvep <- read_excel(
"Data/codebook_dvep.xlsx",
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
# 1. Getting started with R
## Clear existing data and graphics
rm(list = ls())
graphics.off()
cat("\014")  # Clear any pending RStudio sessions or temporary files
## Load necessary libraries
library(tidyverse)
library(readxl)
library(lubridate)
library(stringr)
library(purrr)
library(gt)
library(jmv)
library(skimr)
## Set working directory
setwd("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP")
# 2. Read CSV data files (Tidyverse)
codebook_dvep <- read_excel(
"Data/codebook_dvep.xlsx",
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
file.exists("Data/codebook_dvep.xlsx")
getwd()
## Set working directory
setwd("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP")
getwd()
## Set working directory
setwd('/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP')
getwd
getwd()
setwd('/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP')
getwd()
# 2. Read CSV data files (Tidyverse)
codebook_dvep <- read_excel(
"Data/codebook_dvep.xlsx",
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
codebook_bia <- read_excel(
"Data/codebook_bia.xlsx",
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
getwd()
file.exists("Data/codebook_dvep.xlsx")
# 1. Getting started with R
## Clear existing data and graphics
rm(list = ls())
graphics.off()
cat("\014")  # Clear any pending RStudio sessions or temporary files
## Load necessary libraries
library(tidyverse)
library(readxl)
library(lubridate)
library(stringr)
library(purrr)
library(gt)
library(jmv)
library(skimr)
## Set working directory
setwd('/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP')
getwd()
file.exists("Data/codebook_dvep.xlsx")
file.exists('Data/codebook_dvep.xlsx')
# 2. Read CSV data files (Tidyverse)
codebook_dvep <- read_excel(
'Data/codebook_dvep.xlsx',
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
# 2. Read CSV data files (Tidyverse)
codebook_dvep <- read_excel(
normalizePath("Data/codebook_dvep.xlsx"),
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
# 2. Read CSV data files (Tidyverse)
normalizePath("Data/codebook_dvep.xlsx")
codebook_dvep <- read_excel(
normalizePath,
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
ls -l "Data/codebook_dvep.xlsx"
## Set working directory
setwd("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP")
getwd()
codebook_dvep <- read_excel(
"Data/codebook_dvep.xlsx",
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
# 2. Read CSV data files (Tidyverse)
## Set working directory
setwd("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP/Data")
getwd()
# 2. Read CSV data files (Tidyverse)
## Set working directory
setwd("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP/Data")
# 2. Read CSV data files (Tidyverse)
## Set working directory
setwd("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP/Data")
getwd()
# 2. Read CSV data files (Tidyverse)
## Set working directory
setwd("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP/Data")
getwd()
# 2. Read CSV data files (Tidyverse)
## Set working directory
setwd('/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP/Data_files')
getwd()
getwd()
codebook_dvep <- read_excel(
"Data/codebook_dvep.xlsx",
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
# 1. Getting started with R
## Clear existing data and graphics
rm(list = ls())
graphics.off()
cat("\014")  # Clear any pending RStudio sessions or temporary files
## Load necessary libraries
library(tidyverse)
library(readxl)
library(lubridate)
library(stringr)
library(purrr)
library(gt)
library(jmv)
library(skimr)
codebook_dvep <- read_excel(
"Data/codebook_dvep.xlsx",
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
getwd()
# 1. Getting started with R
## Clear existing data and graphics
rm(list = ls())
graphics.off()
cat("\014")  # Clear any pending RStudio sessions or temporary files
## Load necessary libraries
library(tidyverse)
library(readxl)
library(lubridate)
library(stringr)
library(purrr)
library(gt)
library(jmv)
library(skimr)
codebook_dvep <- read_excel(
"Data/codebook_dvep.xlsx",
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
codebook_bia <- read_excel(
"Data/codebook_bia.xlsx",
col_names = TRUE,
col_types = NULL,
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000
) |>
arrange(index)
codebook_structure  <- read_csv(
"Data/codebook_structure.csv",
col_names = TRUE) |>
select(
form_name_en:V3
)
codebook_ncit  <- read_csv(
"Data/codebook_ncit.csv",
col_names = TRUE)
data  <- read_csv(
"Data/data_dvep.csv",
col_names = TRUE,
col_types = NULL,
col_select = NULL,
id = NULL,
locale = default_locale(),
na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
quote = "\"",
comment = "",
trim_ws = TRUE,
skip = 0, # Number of lines to skip before reading data
n_max = Inf, # Maximum number of lines to read.
guess_max = 1000,
name_repair = "unique",
num_threads = readr_threads(),
progress = show_progress(),
show_col_types = TRUE,
skip_empty_rows = TRUE,
lazy = should_read_lazy()
)
data_bia_D3 <- read_csv(
"Data/data_bia_D3.csv",
col_names = TRUE)
data_bia_D1 <- read_csv(
"Data/data_bia_D1.csv",
col_names = TRUE)
list.dirs('/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP')
list.dirs('/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/PROJECTS/DVEP', full.names = FALSE)
