---
title: "template_2"
format: html
---

## Escore DASS - Ansiedade

Variável: `dass_score_anxiety`

```{r}
#| label: dass_score_anxiety-histogram

# Plot 1: Raw data
dass_score_anxiety_hist_1 <- data_model_V1V3 %>% 
    #filter(
    #    dass_score_anxiety < 300
    #) %>% 
    ggplot(aes(x = dass_score_anxiety)) + 
    geom_histogram(bins = 30, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
dass_score_anxiety_hist_2 <- data_model_V1V3 %>% 
    #filter(
    #    dass_score_anxiety < 300
    #) %>%
    ggplot(aes(x = log1p(dass_score_anxiety))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
dass_score_anxiety_hist_1 + dass_score_anxiety_hist_2 # library(patchwork)
```
```{r}
#| label: dass_score_anxiety-models-nb

# Fit a negative‐binomial GLMM
dass_score_anxiety_nb_model <- glmmTMB::glmmTMB(
  formula = dass_score_anxiety ~ allocation_group * visit + (1 | record_id),
  family  = glmmTMB::nbinom2(),
  data    = data_model_V1V3
)

# Check collinearity
performance::check_collinearity(dass_score_anxiety_nb_model)

# 3. Identify the 5 most “influential” clusters by magnitude of their random intercepts
re_nb <- glmmTMB::ranef(dass_score_anxiety_nb_model)$cond$record_id
re_nb_df <- data.frame(
  record_id = rownames(re_nb),
  intercept = re_nb[, 1],
  stringsAsFactors = FALSE
)
influential_ids_nb <- re_nb_df %>%
  dplyr::arrange(dplyr::desc(abs(intercept))) %>%
  dplyr::slice_head(n = 5) %>%
  dplyr::pull(record_id)

# 4. Re‐fit the model excluding those top‐5 clusters
dass_score_anxiety_nb_model_sens <- update(
  dass_score_anxiety_nb_model,
  data = dplyr::filter(data_model_V1V3, !record_id %in% influential_ids_nb)
)

# 5. Inspect which record_ids were most extreme
influential_ids_nb
```

#### Resumo dos modelos

```{r}
#| label: dass_score_anxiety-models-summary-nb

# Model summaries
summary(dass_score_anxiety_nb_model)
summary(dass_score_anxiety_nb_model_sens)

# Compare performance
performance::compare_performance(
  dass_score_anxiety_nb_model,
  dass_score_anxiety_nb_model_sens
)
```

```{r}
#| label: dass_score_anxiety-performance-nb

# Diagnostic checks
performance::check_model(dass_score_anxiety_nb_model)
performance::check_model(dass_score_anxiety_nb_model_sens)
```
#### Médias Marginais Estimadas

##### Todos os dados

```{r}
#| label: dass_score_anxiety-EMM-nb

# Estimated marginal means on the response scale
dass_score_anxiety_nb_emm <- emmeans::emmeans(
  dass_score_anxiety_nb_model,
  ~ allocation_group * visit,
  type = "response"
)

# Pairwise contrasts by visit
emmeans::contrast(
  dass_score_anxiety_nb_emm,
  method = "pairwise",
  by     = "visit",
  adjust = "bonferroni"
) %>% summary(infer = c(TRUE, TRUE))

# Pairwise contrasts over time within each group
emmeans::contrast(
  dass_score_anxiety_nb_emm,
  method = "pairwise",
  by     = "allocation_group",
  adjust = "bonferroni"
) %>% summary(infer = c(TRUE, TRUE))

# Plot marginal means
plot(dass_score_anxiety_nb_emm, comparisons = TRUE)
```
##### Análise de sensibilidade

```{r}
#| label: dass_score_anxiety-EMM-nb-sens

# Estimated marginal means on the response scale
dass_score_anxiety_nb_emm_sens <- emmeans::emmeans(
  dass_score_anxiety_nb_model_sens,
  ~ allocation_group * visit,
  type = "response"
)

# Pairwise contrasts by visit
emmeans::contrast(
  dass_score_anxiety_nb_emm_sens,
  method = "pairwise",
  by     = "visit",
  adjust = "bonferroni"
) %>% summary(infer = c(TRUE, TRUE))

# Pairwise contrasts over time within each group
emmeans::contrast(
  dass_score_anxiety_nb_emm_sens,
  method = "pairwise",
  by     = "allocation_group",
  adjust = "bonferroni"
) %>% summary(infer = c(TRUE, TRUE))

# Plot marginal means
plot(dass_score_anxiety_nb_emm_sens, comparisons = TRUE)
```


```{r}
#| label: dass_score_anxiety-plot-curve

ggplot(
    data = data_model_V1V3, 
    aes(
        x = as.factor(visit),
        y = dass_score_anxiety,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group)

data_model_V1V3 %>% 
    filter(
        !(record_id %in% 
		influential_ids_nb)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = dass_score_anxiety,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group)
```

