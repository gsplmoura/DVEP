---
format:
  html:
    page-layout: full
    toc: true
    toc-depth: 4
    toc-float:
      collapsed: false
      smooth-scroll: true
    css: styles.css
    code-fold: true
  pdf:
    toc: true
    toc-depth: 2
    pdf-engine: xelatex
---

# Functions for data wrangling

## filter_variables()

`filter_variables(visit = c("eleg", "V1", "V2", "V3"), include_repeating = NULL, form_name = NULL, filter_included = TRUE)`

Arguments:

-   `visit`: A vector of visit names to filter (default: all visits)

-   `include_repeating = NULL`

    -   If NULL, includes all variables

    -   If 0, does not include repeating variables

    -   If 1, only shows repeating variables

-   `form_name = NULL`: The name of the form to filter on (NULL means no filtering by form)

-   `filter_included = TRUE`: Whether to filter by the 'included' column (default: TRUE)

```{r}
filter_variables <- function(
        visit = c("eleg", "V1", "V2", "V3"),  
        include_repeating = NULL,            
        form_name = NULL,                    
        filter_included = TRUE              
        ) {
  
  # Validate the 'visit' input: Ensure all provided visit names are valid
  if (!all(visit %in% c("eleg", "V1", "V2", "V3"))) {
    stop("Invalid visit name. Choose from 'eleg', 'V1', 'V2', or 'V3'.")
  }
  
  # Define valid form names for validation
  valid_form_names <- c(
    "eleg", "demographic", "whoqol", "dass", "ecap", "measures", "bp_limb", "bp", 
    "bia", "handgrip", "eliminations", "evs", "alcohol", "tobacco", "diet_recall", 
    "intake", "dates", "allocation", "conditions", "drugs", "old.drugs", "history", 
    "symptoms", "phy.exam", "labs", "ecg", "compliance", "events", "medical", 
    "followup", "conclusion"
  )
  
  # Validate the 'form_name' input: Ensure it contains only valid form names
  if (!is.null(form_name) && !all(form_name %in% valid_form_names)) {
    stop("Invalid form_name. Choose from: ", paste(valid_form_names, collapse = ", "))
  }
  
  # Filter the 'codebook_dvep' based on the specified criteria
  filtered_codebook <- codebook_dvep %>% 
    filter(
      # If filter_included is TRUE, filter for rows where 'included' equals 1
      if (filter_included) included == 1 else TRUE,
      
      # Retain rows where at least one of the selected visits has a value greater than 0
      rowSums(across(all_of(visit))) > 0,
      
      # If 'include_repeating' is specified, filter by the repeating_instrument column
      if (!is.null(include_repeating)) repeating_instrument == include_repeating else TRUE,
      
      # If 'form_name' is specified, filter by the form_name_en column
      if (!is.null(form_name)) form_name_en == form_name else TRUE
    )
  
  # Extract and return the 'variable' column from the filtered codebook
  filtered_vars <- filtered_codebook$variable
  
  return(filtered_vars)  # Return the filtered variable names
}

```

## filter_data()

`filter_data <- function( visit = c("eleg", "V1", "V2", "V3"), include_repeating = NULL, form_name = NULL)`

Arguments:

-   `visit`: A vector of visit names to filter (default: all visits)

-   `include_repeating = NULL`

    -   If NULL, includes all variables

    -   If 0, does not include repeating variables

    -   If 1, only shows repeating variables

-   `form_name = NULL`: The name of the form to filter on. **Will only work for repeating instruments.**

```{r, eval=FALSE}
# ORIGINAL VERSION, DEPRECATED
## filter_data() based on visit, repeating instrument and form
filter_data <- function(
        visit = c("eleg", "V1", "V2", "V3"), 
        include_repeating = NULL, 
        form_name = NULL) {
  
  # Map visit names to actual event_name values
  mapped_visits <- case_when(
    visit == "eleg" ~ "eleg_arm_1",
    visit == "V1" ~ "1visit_arm_1",
    visit == "V2" ~ "2visit_arm_1",
    visit == "V3" ~ "3visit_arm_1",
    TRUE ~ visit
  )
  
  # Map form_name to repeat_instrument values using a case_when structure
  mapped_form_name <- if (!is.null(form_name)) {
    case_when(
      form_name == "eleg" ~ "elegibilidade",
      form_name == "demographic" ~ "dados_demogrficos",
      form_name == "whoqol" ~ "questionrio_qualidade_de_vida",
      form_name == "dass" ~ "escore_de_depresso_ansiedade_e_estresse",
      form_name == "ecap" ~ "escala_de_compulso_alimentar",
      form_name == "measures" ~ "antropometria",
      form_name == "bp_limb" ~ "presso_arterial_determinao_do_membro_de_referncia",
      form_name == "bp" ~ "presso_arterial",
      form_name == "bia" ~ "impedncia_bioeltrica_corporal",
      form_name == "handgrip" ~ "fora_de_preenso_palmar",
      form_name == "eliminations" ~ "avaliao_nutricional",
      # form_name == "allergies" ~ "alergia_alimentar",
      form_name == "evs" ~ "exercise_vital_sign",
      form_name == "alcohol" ~ "consumo_alcool",
      form_name == "tobacco" ~ "consumo_tabaco",
      form_name == "diet_recall" ~ "recordatrio_alimentar",
      form_name == "intake" ~ "avaliao_da_ingesto_alimentar",
      form_name == "dates" ~ "datas_importantes",
      form_name == "allocation" ~ "nmero_do_participante",
      form_name == "conditions" ~ "comorbidades",
      form_name == "drugs" ~ "medicamentos_de_uso_habitual",
      form_name == "old.drugs" ~ "medicamentos_prvios",
      form_name == "history" ~ "antecedentes_pessoais",
      form_name == "symptoms" ~ "sintomas",
      form_name == "phy.exam" ~ "exame_fsico",
      form_name == "labs" ~ "exames_laboratoriais",
      form_name == "ecg" ~ "eletrocardiograma",
      form_name == "compliance" ~ "adeso",
      form_name == "events" ~ "eventos_adversos",
      form_name == "medical" ~ "avaliao_mdica",
      form_name == "followup" ~ "contato_semanal",
      form_name == "conclusion" ~ "concluso",
      # form_name == "annex" ~ "anexos",
      TRUE ~ form_name
    )
  } else {
    NULL
  }
  
  # Get the filtered variable names using the filter_variables function
  filtered_vars <- filter_variables(visit, include_repeating, form_name)
  
  # Filter the raw data to only include these columns and match event_name and form_name
  filtered_data <- data %>% 
    filter(event_name %in% mapped_visits) %>%
    filter(if (!is.null(include_repeating) && include_repeating == 0) is.na(repeat_instrument) | repeat_instrument == "" else TRUE) %>%
    filter(if (!is.null(include_repeating) && include_repeating == 1) !is.na(repeat_instrument) & repeat_instrument != "" else TRUE) %>%
    filter(if (!is.null(mapped_form_name)) repeat_instrument == mapped_form_name else TRUE) %>%
    select(record_id, event_name, repeat_instrument, repeat_instance, all_of(filtered_vars)) %>%
    mutate(
      repeat_instrument = ifelse(is.na(repeat_instrument), "", repeat_instrument),
      repeat_instance = ifelse(repeat_instrument == "", NA, repeat_instance)
    )
  
  return(filtered_data)
}
```

```{r, eval=FALSE}
filter_data <- function(
  visit = c("eleg", "V1", "V2", "V3"), 
  include_repeating = NULL, 
  form_name = NULL) {
  
  # Map visit names to event_name values
  mapped_visits <- case_when(
    visit == "eleg" ~ "eleg_arm_1",
    visit == "V1" ~ "1visit_arm_1",
    visit == "V2" ~ "2visit_arm_1",
    visit == "V3" ~ "3visit_arm_1",
    TRUE ~ visit
  )
  
  cat("Mapped visits:\n")
  print(mapped_visits)
  
  # Map form_name to REDCap repeat_instrument values
  mapped_form_name <- if (!is.null(form_name)) {
    case_when(
      form_name == "eleg" ~ "elegibilidade",
      form_name == "demographic" ~ "dados_demogrficos",
      form_name == "whoqol" ~ "questionrio_qualidade_de_vida",
      form_name == "dass" ~ "escore_de_depresso_ansiedade_e_estresse",
      form_name == "ecap" ~ "escala_de_compulso_alimentar",
      form_name == "measures" ~ "antropometria",
      form_name == "bp_limb" ~ "presso_arterial_determinao_do_membro_de_referncia",
      form_name == "bp" ~ "presso_arterial",
      form_name == "bia" ~ "impedncia_bioeltrica_corporal",
      form_name == "handgrip" ~ "fora_de_preenso_palmar",
      form_name == "eliminations" ~ "avaliao_nutricional",
      form_name == "evs" ~ "exercise_vital_sign",
      form_name == "alcohol" ~ "consumo_alcool",
      form_name == "tobacco" ~ "consumo_tabaco",
      form_name == "diet_recall" ~ "recordatrio_alimentar",
      form_name == "intake" ~ "avaliao_da_ingesto_alimentar",
      form_name == "dates" ~ "datas_importantes",
      form_name == "allocation" ~ "nmero_do_participante",
      form_name == "conditions" ~ "comorbidades",
      form_name == "drugs" ~ "medicamentos_de_uso_habitual",
      form_name == "old.drugs" ~ "medicamentos_prvios",
      form_name == "history" ~ "antecedentes_pessoais",
      form_name == "symptoms" ~ "sintomas",
      form_name == "phy.exam" ~ "exame_fsico",
      form_name == "labs" ~ "exames_laboratoriais",
      form_name == "ecg" ~ "eletrocardiograma",
      form_name == "compliance" ~ "adeso",
      form_name == "events" ~ "eventos_adversos",
      form_name == "medical" ~ "avaliao_mdica",
      form_name == "followup" ~ "contato_semanal",
      form_name == "conclusion" ~ "concluso",
      TRUE ~ form_name
    )
  } else {
    NULL
  }
  
  cat("Mapped form name:\n")
  print(mapped_form_name)
  
  # Get the filtered variable names using the filter_variables function
  filtered_vars <- filter_variables(visit, include_repeating, form_name)
  
  cat("Filtered variable names:\n")
  print(filtered_vars)
  
  # Begin filtering
  filtered_data <- data %>%
    filter(event_name %in% mapped_visits) %>%
    {
      if (!is.null(include_repeating)) {
        if (include_repeating == 0) {
          filter(., is.na(repeat_instrument) | repeat_instrument == "")
        } else if (include_repeating == 1) {
          filter(., !is.na(repeat_instrument) & repeat_instrument != "")
        } else {
          .
        }
      } else {
        .
      }
    } %>%
    filter(if (!is.null(mapped_form_name)) repeat_instrument == mapped_form_name else TRUE) %>%
    select(record_id, event_name, repeat_instrument, repeat_instance, all_of(filtered_vars)) %>%
    mutate(
      repeat_instrument = ifelse(is.na(repeat_instrument), "", repeat_instrument),
      repeat_instance = ifelse(repeat_instrument == "", NA, repeat_instance)
    )
  
  cat("Rows after filtering:\n")
  print(nrow(filtered_data))
  
  return(filtered_data)
}
```

```{r}
# Updated version of `filter_data()` — now robust to missing or mismatched column names

filter_data <- function(
  visit = c("eleg", "V1", "V2", "V3"), 
  include_repeating = NULL, 
  form_name = NULL) {
  
  # Map visit names to event_name values
  mapped_visits <- case_when(
    visit == "eleg" ~ "eleg_arm_1",
    visit == "V1" ~ "1visit_arm_1",
    visit == "V2" ~ "2visit_arm_1",
    visit == "V3" ~ "3visit_arm_1",
    TRUE ~ visit
  )
  
  cat("Mapped visits:\n")
  print(mapped_visits)
  
  # Map form_name to REDCap repeat_instrument values
  mapped_form_name <- if (!is.null(form_name)) {
    case_when(
      form_name == "eleg" ~ "elegibilidade",
      form_name == "demographic" ~ "dados_demogrficos",
      form_name == "whoqol" ~ "questionrio_qualidade_de_vida",
      form_name == "dass" ~ "escore_de_depresso_ansiedade_e_estresse",
      form_name == "ecap" ~ "escala_de_compulso_alimentar",
      form_name == "measures" ~ "antropometria",
      form_name == "bp_limb" ~ "presso_arterial_determinao_do_membro_de_referncia",
      form_name == "bp" ~ "presso_arterial",
      form_name == "bia" ~ "impedncia_bioeltrica_corporal",
      form_name == "handgrip" ~ "fora_de_preenso_palmar",
      form_name == "eliminations" ~ "avaliao_nutricional",
      form_name == "evs" ~ "exercise_vital_sign",
      form_name == "alcohol" ~ "consumo_alcool",
      form_name == "tobacco" ~ "consumo_tabaco",
      form_name == "diet_recall" ~ "recordatrio_alimentar",
      form_name == "intake" ~ "avaliao_da_ingesto_alimentar",
      form_name == "dates" ~ "datas_importantes",
      form_name == "allocation" ~ "nmero_do_participante",
      form_name == "conditions" ~ "comorbidades",
      form_name == "drugs" ~ "medicamentos_de_uso_habitual",
      form_name == "old.drugs" ~ "medicamentos_prvios",
      form_name == "history" ~ "antecedentes_pessoais",
      form_name == "symptoms" ~ "sintomas",
      form_name == "phy.exam" ~ "exame_fsico",
      form_name == "labs" ~ "exames_laboratoriais",
      form_name == "ecg" ~ "eletrocardiograma",
      form_name == "compliance" ~ "adeso",
      form_name == "events" ~ "eventos_adversos",
      form_name == "medical" ~ "avaliao_mdica",
      form_name == "followup" ~ "contato_semanal",
      form_name == "conclusion" ~ "concluso",
      TRUE ~ form_name
    )
  } else {
    NULL
  }

  cat("Mapped form name:\n")
  print(mapped_form_name)
  
  # Get filtered variable names
  filtered_vars <- filter_variables(visit, include_repeating, form_name)
  
  cat("Filtered variable names:\n")
  print(filtered_vars)
  
  # Begin filtering
  filtered_data <- data %>%
    filter(event_name %in% mapped_visits) %>%
    {
      if (!is.null(include_repeating)) {
        if (include_repeating == 0) {
          filter(., is.na(repeat_instrument) | repeat_instrument == "")
        } else if (include_repeating == 1) {
          filter(., !is.na(repeat_instrument) & repeat_instrument != "")
        } else {
          .
        }
      } else {
        .
      }
    } %>%
    filter(if (!is.null(mapped_form_name)) repeat_instrument == mapped_form_name else TRUE)

  # Columns that actually exist in the dataset
  valid_vars <- intersect(
    c("record_id", "event_name", "repeat_instrument", "repeat_instance", filtered_vars),
    colnames(filtered_data)
  )
  
  filtered_data <- filtered_data %>%
    dplyr::select(all_of(valid_vars)) %>%
    mutate(
      repeat_instrument = ifelse(is.na(repeat_instrument), "", repeat_instrument),
      repeat_instance = ifelse(repeat_instrument == "", NA, repeat_instance)
    )

  cat("Rows after filtering:\n")
  print(nrow(filtered_data))
  
  return(filtered_data)
}
```

## filter_codebook()

`filter_codebook(form_name = c(...), included = 1)`

Arguments

-   `form_name`

-   `included = 1`: defaults to 1, filtering variables by `included` column. If set to 0, will include all variables

```{r}
## 7.3 filter_codebook()
filter_codebook <- function(form_name = c(
    "eleg", "tcle", "demographic", "whoqol", "dass", "ecap", "measures", 
  "bp_limb", "bp", "bia", "handgrip", "eliminations", "allergies", 
  "evs", "alcohol", "tobacco", "diet_recall", "intake", "dates", 
  "allocation", "conditions", "drugs", "old.drugs", "history", 
  "symptoms", "phy.exam", "labs", "ecg", "compliance", "events", 
  "medical", "followup", "conclusion", "annex"),
  included = 1) {
    
    # Ensure input is valid
    if (!all(form_name %in% c("eleg", "tcle", "demographic", "whoqol", "dass", "ecap", "measures", 
  "bp_limb", "bp", "bia", "handgrip", "eliminations", "allergies", 
  "evs", "alcohol", "tobacco", "diet_recall", "intake", "dates", 
  "allocation", "conditions", "drugs", "old.drugs", "history", 
  "symptoms", "phy.exam", "labs", "ecg", "compliance", "events", 
  "medical", "followup", "conclusion", "annex"))) 
        {
      stop("Invalid form name")
    }
    
    if (included == 1) {
        codebook_form <- codebook_dvep %>% 
        filter(form_name_en %in% form_name & included == 1)
    } else {
        codebook_form <- codebook_dvep %>% 
        filter(form_name_en %in% form_name)
    }

    return(codebook_form)
}
```

## convert_col_type()

`convert_col_type(data, codebook = codebook_dvep)`

Arguments:

-   `data`: dataframe to apply the function

-   `codebook = codebook_dvep`: codebook source. Defaults to `codebook_dvep`

Tips:

-   as.factor(): categorical data where the label (e.g., "6 cápsulas ao dia") is more meaningful than numeric code.
-   binary data (0, Não \| 1, Sim):
    -   Use as.factor() if the "label" (Não or Sim) is important.
    -   Use as.numeric(as.character()) if you're performing mathematical operations (e.g., calculating proportions, averages).
-   For ordinal data (1, Ruim \| 2, Regular \| 3, Boa \| 4, Excelente): use as.factor() with ordered levels (ordered()) if you need to preserve the ranking.

```{r}
## 7.4 convert_col_type()
convert_col_type <- function(data, codebook = codebook_dvep) {
    # Nested function to convert a single column
    convert_column <- function(column, type) {
        switch(type,
           f = as.factor(column),                      # Factor
           o = as.factor(column),                      # Factor
           c = as.character(column),                   # Character
           d = as.numeric(column),                     # Numeric
           i = as.integer(column),                     # Integer
           k = lubridate::ymd(column),                 # Date (YYYY-MM-DD)
           t = lubridate::ymd_hms(column),             # Date-Time (YYYY-MM-DD HH:MM:SS)
           h = lubridate::hms(column),                 # Time only (HH:MM:SS)
           n = as.numeric(as.character(column)),       # Coerce to Numeric
           l = as.logical(column),                     # Logical
           D = as.Date(column, format = "%Y-%m-%d"),   # Date with specified format
           T = as.POSIXct(column, format = "%Y-%m-%d %H:%M:%S"),  # Date-Time
           column  # Default (no change)
    )
    }
    # Apply conversion
    data <- data %>%
        mutate(
            across(
                .cols = all_of(intersect(colnames(data), codebook$variable)), # Ensures only common variables are processed
                .fns = ~ convert_column(.x, codebook$col_types[which(codebook$variable == cur_column())])
            )
        )
}
convert_col_type(data)
```

## label_variables()

`label_variables(data, codebook, language = "pt")`

Arguments:

-   `data`: dataframe to which function will be applied

-   `codebook`: source codebook

-   `language = "pt"`: defaults to portuguese (`"pt"`); set `"en"` for english

```{r}

label_variables <- function(data, codebook, language = "pt") {
  # Determine the label column based on the language argument
  label_column <- ifelse(language == "en", "label_en", "label_pt")

  # Ensure column names are consistent
  codebook_vars <- codebook$variable
  codebook_labels <- codebook[[label_column]]

  # Identify common variables in both data and codebook
  common_vars <- intersect(names(data), codebook_vars)

  # Loop through the common variables and assign labels
  for (var in common_vars) {
    label <- codebook_labels[codebook_vars == var]
    attr(data[[var]], "label") <- label
  }

  return(data)
}
```

## label_choices()

`label_choices(data, codebook = codebook_dvep)`

Arguments:

-   `data`: dataframe to which function will be applied

-   `codebook`: source codebook (dafaults to `codebook_dvep`)

```{r}
label_choices <- function(data, codebook = codebook_dvep) {
  # Ensure required libraries are loaded
  if (!requireNamespace("dplyr") || !requireNamespace("tidyr") ||
      !requireNamespace("stringr") || !requireNamespace("purrr")) {
    stop("Required libraries: dplyr, tidyr, stringr, purrr")
  }
  
  # 1. Filter codebook for relevant variables with col_types in "f" or "o"
  selected_codebook <- codebook %>% 
    filter(
      variable %in% colnames(data) &  # Variables present in data
      col_types %in% c("f", "o")     # col_types in "f" or "o"
    )
  
  # 2. Parse the `choices` column
  parsed_choices <- selected_codebook %>%
    rowwise() %>% 
    mutate(
      parsed = list(
        str_split(choices, " \\| ") %>%   # Split choices by "|"
          unlist() %>%
          map(~ str_split_fixed(.x, ", ", 2) %>%  # Split by ", " into two columns
            as_tibble(.name_repair = "unique") %>%  # Ensure unique column names
            setNames(c("raw_value", "label"))    # Name columns
          ) %>%
          bind_rows()  # Combine into a tibble
      )
    ) %>%
    select(variable, parsed) %>%
    unnest(parsed)  # Expand parsed choices into rows
  
  # 3. Create lookup tables for selected variables
  lookup_tables <- parsed_choices %>%
    group_by(variable) %>%
    summarize(
      lookup = list(setNames(label, raw_value)), .groups = "drop"
    ) %>%
    deframe()
  
  # 4. Replace raw values with labels in data, using "Unmatched" for unmatched values
  for (column_name in names(lookup_tables)) {
    if (column_name %in% colnames(data)) {  # Ensure column exists in data
      data[[column_name]] <- recode(        # Apply recode using the lookup table
        data[[column_name]],
        !!!lookup_tables[[column_name]],
        .default = "Unmatched"             # Set "Unmatched" as the placeholder for unmatched values
      )
    }
  }
  
  # Explicitly return the modified data
  return(data)
}
```

# Functions for data analysis

## summarize_numerical()

**Description**

Summarizes numerical variables by computing the mean, 95% confidence interval, and number of observations (`N`). Supports both grouped and ungrouped summaries and displays labels when available.

**Usage**

```{r}
summarize_numerical(data, group_col = NULL, use_labels = TRUE)
```

✔️ Arguments • data: Data frame with the variables to summarize. • group_col (optional): String with the name of the grouping variable. If NULL, returns an overall summary. • use_labels (logical): Whether to use variable labels if available (TRUE, default) or variable names (FALSE).

✔️ Output

A tidy data frame with: • Variable: Variable name or label. • Mean (95% CI): Mean with 95% confidence interval (mean (lower–upper)). • N: Count of non-missing observations. • Group columns (if a grouping variable is provided).

✔️ Example

summarize_numerical(data = dataset, group_col = "group")

## summarize_categorical()

✔️ Description

Generates frequency and percentage tables for categorical variables. Can return overall summaries or group-wise summaries.

✔️ Usage

summarize_categorical(data, group_col = NULL, use_labels = TRUE)

✔️ Arguments • data: Data frame with categorical variables. • group_col (optional): Name of the grouping variable. • use_labels (logical): If TRUE (default), applies variable labels.

✔️ Output

A tidy data frame with: • Variable: Variable name or label. • Level: Category level (factor or character). • Freq: Frequency count. • Percent: Percentage. • Group columns (if grouping applied).

✔️ Example

summarize_categorical(data = dataset, group_col = "group")

## compare_groups()

✔️ Description

Performs statistical comparisons between two groups for each variable: • Numeric variables → t-test. • Categorical variables → Chi-squared or Fisher’s exact test (automatically chosen based on expected cell counts).

✔️ Usage

compare_groups(data, group_col = "allocation_group", use_labels = TRUE, return_df = FALSE)

✔️ Arguments • data: Data frame for analysis. • group_col (string): Name of the grouping variable (default = "allocation_group"). • use_labels (logical): Whether to display variable labels (TRUE, default). • return_df (logical): If TRUE, returns a tidy data frame. If FALSE, returns a formatted gt table (default).

✔️ Output • A tidy data frame or a formatted gt table with: • Variable: Variable name or label. • Test: Test type (t-test, Chi-squared, or Fisher's exact test). • Statistic: Test statistic (if applicable). • P_value: P-value from the test.

✔️ Example

compare_groups(data = dataset, group_col = "group")

## sensitivity_check_lmer()

Performs a sensitivity analysis for linear mixed-effects models (lmer) by identifying influential clusters/groups based on Cook’s distance. It evaluates the robustness of the model by:

```         
1.  Identifying influential groups.
2.  Refitting the model without those groups.
3.  Comparing fixed effects between the original and refitted models.
```

+--------------+------------------------------------------------------------------------------+
| **Argument** | **Description**                                                              |
+==============+==============================================================================+
| model        | A linear mixed-effects model fitted with lmer() from the lme4 package.       |
+--------------+------------------------------------------------------------------------------+
| id_var       | Grouping variable used to compute influence measures (default: "record_id"). |
+--------------+------------------------------------------------------------------------------+
| top_n        | Number of top influential groups to consider (default: 5).                   |
+--------------+------------------------------------------------------------------------------+

**How It Works**

1.  Computes Cook’s Distance

Calculates the influence of each group based on how much the fixed effects would change if that group were removed.

2.  Identifies Influential Groups

A group is considered influential if it meets either of:

-   Rule-based threshold: Cook’s distance \> 4/N (N = number of groups).
-   Top-N largest Cook’s distances.

3.  Refits the Model

Refits the original model without the identified influential groups.

4.  Generates a Comparison Table

Compares the fixed effects estimates, standard errors, t-statistics, and p-values between the original model and the sensitivity model (without influential groups).

**Output**

The function returns a list with the following components:

+-------------------+-------------------------------------------------------------------------------+
| **Object**        | **Description**                                                               |
+===================+===============================================================================+
| cooks_table       | Data frame with Cook’s distance for each group.                               |
+-------------------+-------------------------------------------------------------------------------+
| influential_ids   | Character vector of IDs flagged as influential.                               |
+-------------------+-------------------------------------------------------------------------------+
| model_original    | The original fitted lmer() model.                                             |
+-------------------+-------------------------------------------------------------------------------+
| model_sensitivity | The refitted model excluding influential groups.                              |
+-------------------+-------------------------------------------------------------------------------+
| comparison_table  | A tidy table comparing fixed effects between original and sensitivity models. |
+-------------------+-------------------------------------------------------------------------------+

**Example usage**

```{r}
# Fit an example mixed-effects model
model <- lmer(
  outcome ~ predictor + visit + (1 | record_id),
  data = my_data
)

# Run sensitivity analysis
result <- sensitivity_check_lmer(model)

# View Cook's distances
result$cooks_table

# View influential IDs
result$influential_ids

# View comparison of fixed effects
result$comparison_table

# Access the sensitivity model
summary(result$model_sensitivity)
```

**References**

- Nieuwenhuis, R., te Grotenhuis, M., & Pelzer, B. (2012). influence.ME: Tools for detecting influential data in mixed effects models. R Journal, 4(2), 38-47.