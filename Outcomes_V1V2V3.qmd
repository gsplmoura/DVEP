---
title: "All outcomes"
author: "S.P.L.M., Gustavo"
date: today
format:
  html:
    page-layout: full
    toc: true
    toc-depth: 4
    toc-float:
      collapsed: false
      smooth-scroll: true
    css: styles.css
    code-fold: false
  pdf:
    toc: true
    toc-depth: 2
    pdf-engine: xelatex
---

```{r setup}
#| include: false

knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  tibble.print_max = Inf,
  tibble.width = Inf)
```

```{r, echo=FALSE, message=FALSE}

rm(list = ls())
graphics.off()
cat("\014")  # Clear any pending RStudio sessions or temporary files

# Load functions from external script
source("helper_functions.R")

## Load necessary libraries
library(tidyverse)
library(readxl)
library(lubridate)
library(stringr)
library(purrr)
library(here)
library(lme4)
library(lmerTest)
library(skimr)
library(performance)
library(gt)
library(patchwork)
library(emmeans)

# Read Files ----
## Codebooks
codebook_dvep <- read_excel(
    "Codebooks/codebook_dvep.xlsx",
    col_names = TRUE,
    col_types = NULL,
    na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
    trim_ws = TRUE,
    skip = 0, # Number of lines to skip before reading data
    n_max = Inf, # Maximum number of lines to read.
    guess_max = 1000
) %>%
    arrange(index)

#codebook_structure  <- read_csv(
#    "Codebooks/codebook_structure.csv",
#    col_names = TRUE)

#codebook_ncit  <- read_csv(
#    "Codebooks/codebook_ncit.csv",
#    col_names = TRUE)

#codebook_bia <- read_excel(
#    "Codebooks/codebook_bia.xlsx",
#    col_names = TRUE,
#    col_types = NULL,
#    na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
#    trim_ws = TRUE,
#    skip = 0, # Number of lines to skip before reading data
#    n_max = Inf, # Maximum number of lines to read.
#    guess_max = 1000
#) %>%
#    arrange(index)

## Data
data <- readRDS("local_files/Data_processed/data.rds")
# data_bia <- readRDS("Data_processed/data_bia.rds")
# data_bia_D1 <- readRDS("Data_processed/data_bia_D1.rds")
# data_bia_D1_mean <- readRDS("Data_processed/data_bia_D1_mean.rds")
# data_bia_D1_raw <- readRDS("Data_processed/data_bia_D1_raw.rds")
# data_bia_D3 <- readRDS("Data_processed/data_bia_D3.rds")
# data_bia_D3_mean <- readRDS("Data_processed/data_bia_D3_mean.rds")
# data_bia_D3_raw <- readRDS("Data_processed/data_bia_D3_raw.rds")
# data_bia_mean <- readRDS("Data_processed/data_bia_mean.rds")
# data_d1_exclusive <- readRDS("Data_processed/data_d1_exclusive.rds")
# data_filtered <- readRDS("Data_processed/data_filtered.rds")
# data_filtered_seca <- readRDS("Data_processed/data_filtered_seca.rds")
#I21_conditions_R <- readRDS("Data_processed/I21_conditions_R.rds")
#I22_drugs_R <- readRDS("Data_processed/I22_drugs_R.rds")
#I27_labs_R <- readRDS("Data_processed/I27_labs_R.rds")
# I29_compliance_new <- readRDS("Data_processed/I29_compliance_new.rds")
#I30_events_R <- readRDS("Data_processed/I30_events_R.rds")

## SUPERTIBBLE
# data_instruments <- readRDS("Data_instruments/data_instruments.rds")

data_model <- readRDS("local_files/Data_processed/data_model.rds") %>% 
    mutate(
        visit = as.factor(visit),
        record_id = as.factor(record_id)
    )
attributes(data_model$kcal)$label <- "Kcal total"
attributes(data_model$labs_quick_index)$label <- "Quick Index"
attributes(data_model$crp_log)$label <- "Log PCR"

data_model_V1V3 <- data_model %>% 
    filter(!visit == "2")

#class(data_model$record_id)
#class(data_model$allocation_group)
#class(data_model$visit)

```

# Outcomes

Variables:

- labs_ast - negative
- labs_alt - negative
- labs_ggt - negative
- labs_alkp - negative
- labs_cholesterol - negative
- labs_ldl - negative
- labs_hdl - negative
- labs_triglycerides
- labs_glucose
- labs_hba1c
- labs_insulin
- labs_homa_ir
- labs_quick_index
- abdomen
- bmi
- mean_bp_mean
- evs_score

### labs_ast

```{r labs_ast_1}
# Plot 1: Raw data
labs_ast_hist_1 <- data_model %>% 
    filter(
        labs_ast < 300
    ) %>% 
    ggplot(aes(x = labs_ast)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_ast_hist_2 <- data_model %>% 
    filter(
        labs_ast < 300
    ) %>%
    ggplot(aes(x = log1p(labs_ast))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_ast_hist_1 + labs_ast_hist_2 # library(patchwork)
```

```{r labs_ast_2}
# LMM
labs_ast_model <- lmer(log1p(labs_ast) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_ast_model)

# Sensitivity analysis
labs_ast_model_check <- sensitivity_check_lmer(
    model = labs_ast_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_ast_model_sens <- update(object = labs_ast_model,
                              subset = !(record_id %in% labs_ast_model_check$influential_ids))
# Influential IDS
labs_ast_model_check$influential_ids
```

```{r labs_ast_3}
# Model comparison
summary(labs_ast_model)
summary(labs_ast_model_sens)
labs_ast_model_check$comparison_table
performance::compare_performance(labs_ast_model, labs_ast_model_sens)
```

```{r labs_ast_4, fig.width=10, fig.height=10}
performance::check_model(labs_ast_model)
performance::check_model(labs_ast_model_sens)
```

```{r labs_ast_5}
# Get EMMs for each group at each visit
labs_ast_emm <- emmeans::emmeans(
    labs_ast_model_sens, 
    ~ allocation_group * visit
)

# Table of marginal means
labs_ast_emm

# Pairwise comparisons: Between groups at each visit
contrast(labs_ast_emm, method = "pairwise", by = "visit", adjust = "bonferroni")

# Pairwise comparisons: Changes over time within each group
contrast(labs_ast_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni")

# Plot of marginal means
plot(labs_ast_emm, comparisons = TRUE)
```


```{r labs_ast_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_ast,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group)

data_model %>% 
    filter(
        !(record_id %in% labs_ast_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_ast,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group)
```

### labs_alt

```{r labs_alt_1}
# Plot 1: Raw data
labs_alt_hist_1 <- data_model %>% 
    #filter(
    #    labs_alt < 300
    #) %>% 
    ggplot(aes(x = labs_alt)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_alt_hist_2 <- data_model %>% 
    #filter(
    #    labs_alt < 300
    #) %>%
    ggplot(aes(x = log1p(labs_alt))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_alt_hist_1 + labs_alt_hist_2 # library(patchwork)
```

```{r labs_alt_2}
# LMM
labs_alt_model <- lmer(log1p(labs_alt) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_alt_model)

# Sensitivity analysis
labs_alt_model_check <- sensitivity_check_lmer(
    model = labs_alt_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_alt_model_sens <- update(object = labs_alt_model,
                              subset = !(record_id %in% labs_alt_model_check$influential_ids))
# Influential IDS
labs_alt_model_check$influential_ids
```

```{r labs_alt_3}
# Model comparison
summary(labs_alt_model)
summary(labs_alt_model_sens)
labs_alt_model_check$comparison_table
performance::compare_performance(labs_alt_model, labs_alt_model_sens)
```

```{r labs_alt_4, fig.width=10, fig.height=10}
performance::check_model(labs_alt_model)
performance::check_model(labs_alt_model_sens)
```

```{r labs_alt_5}
# Get EMMs for each group at each visit
labs_alt_emm <- emmeans::emmeans(
    labs_alt_model_sens, 
    ~ allocation_group * visit
)

# Table of marginal means
labs_alt_emm

# Pairwise comparisons: Between groups at each visit
contrast(labs_alt_emm, method = "pairwise", by = "visit", adjust = "bonferroni")

# Pairwise comparisons: Changes over time within each group
contrast(labs_alt_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni")

# Plot of marginal means
plot(labs_alt_emm, comparisons = TRUE)
```

```{r labs_alt_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_alt,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) + 
    coord_cartesian(ylim = c(10, 80))

data_model %>% 
    filter(
        !(record_id %in% labs_alt_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_alt,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) + 
    coord_cartesian(ylim = c(10, 80))
```

### labs_ggt

```{r labs_ggt_1}
# Plot 1: Raw data
labs_ggt_hist_1 <- data_model %>% 
    filter(
        labs_ggt < 300
    ) %>% 
    ggplot(aes(x = labs_ggt)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_ggt_hist_2 <- data_model %>% 
    filter(
        labs_ggt < 300
    ) %>%
    ggplot(aes(x = log1p(labs_ggt))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_ggt_hist_1 + labs_ggt_hist_2 # library(patchwork)
```

```{r labs_ggt_2}
# LMM
labs_ggt_model <- lmer(log1p(labs_ggt) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_ggt_model)

# Sensitivity analysis
labs_ggt_model_check <- sensitivity_check_lmer(
    model = labs_ggt_model,
    id_var = "record_id",
    top_n = 7)

# LMM Sensitivity
labs_ggt_model_sens <- update(object = labs_ggt_model,
                              subset = !(record_id %in% labs_ggt_model_check$influential_ids))
# Influential IDS
labs_ggt_model_check$influential_ids
```

```{r labs_ggt_3}
# Model comparison
summary(labs_ggt_model)
summary(labs_ggt_model_sens)
labs_ggt_model_check$comparison_table
performance::compare_performance(labs_ggt_model, labs_ggt_model_sens)
```

```{r labs_ggt_4, fig.width=10, fig.height=10}
performance::check_model(labs_ggt_model)
performance::check_model(labs_ggt_model_sens)
```

```{r labs_ggt_5}
# Get EMMs for each group at each visit
labs_ggt_emm <- emmeans::emmeans(
    labs_ggt_model_sens, 
    ~ allocation_group * visit
)

# Table of marginal means
labs_ggt_emm

# Pairwise comparisons: Between groups at each visit
contrast(labs_ggt_emm, method = "pairwise", by = "visit", adjust = "bonferroni")

# Pairwise comparisons: Changes over time within each group
contrast(labs_ggt_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni")

# Plot of marginal means
plot(labs_ggt_emm)
```

```{r labs_ggt_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_ggt,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_ggt_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_ggt,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### labs_alkp

```{r labs_alkp_1}
# Plot 1: Raw data
labs_alkp_hist_1 <- data_model %>% 
    #filter(
    #    labs_alkp < 300
    #) %>% 
    ggplot(aes(x = labs_alkp)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_alkp_hist_2 <- data_model %>% 
    #filter(
    #    labs_alkp < 300
    #) %>%
    ggplot(aes(x = log1p(labs_alkp))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_alkp_hist_1 + labs_alkp_hist_2 # library(patchwork)
```

```{r labs_alkp_2}
# LMM
labs_alkp_model <- lmer(log1p(labs_alkp) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_alkp_model)

# Sensitivity analysis
labs_alkp_model_check <- sensitivity_check_lmer(
    model = labs_alkp_model,
    id_var = "record_id",
    top_n = 4)

# LMM Sensitivity
labs_alkp_model_sens <- update(object = labs_alkp_model,
                              subset = !(record_id %in% labs_alkp_model_check$influential_ids))
# Influential IDS
labs_alkp_model_check$influential_ids
```

```{r labs_alkp_3}
# Model comparison
summary(labs_alkp_model)
summary(labs_alkp_model_sens)
labs_alkp_model_check$comparison_table
performance::compare_performance(labs_alkp_model, labs_alkp_model_sens)
```

```{r labs_alkp_4, fig.width=10, fig.height=10}
performance::check_model(labs_alkp_model)
performance::check_model(labs_alkp_model_sens)
```

```{r labs_alkp_5}
# Get EMMs for each group at each visit
labs_alkp_emm <- emmeans::emmeans(
    labs_alkp_model_sens, 
    ~ allocation_group * visit
)

# Table of marginal means
labs_alkp_emm

# Pairwise comparisons: Between groups at each visit
contrast(labs_alkp_emm, method = "pairwise", by = "visit", adjust = "bonferroni")

# Pairwise comparisons: Changes over time within each group
contrast(labs_alkp_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni")

# Plot of marginal means
plot(labs_alkp_emm)
```

```{r labs_alkp_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_alkp,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_alkp_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_alkp,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### labs_cholesterol

```{r labs_cholesterol_1}
# Plot 1: Raw data
labs_cholesterol_hist_1 <- data_model %>% 
    #filter(
    #    labs_cholesterol < 300
    #) %>% 
    ggplot(aes(x = labs_cholesterol)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_cholesterol_hist_2 <- data_model %>% 
    #filter(
    #    labs_cholesterol < 300
    #) %>%
    ggplot(aes(x = log1p(labs_cholesterol))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_cholesterol_hist_1 + labs_cholesterol_hist_2 # library(patchwork)
```

```{r labs_cholesterol_2}
# LMM
labs_cholesterol_model <- lmer(labs_cholesterol ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_cholesterol_model)

# Sensitivity analysis
labs_cholesterol_model_check <- sensitivity_check_lmer(
    model = labs_cholesterol_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_cholesterol_model_sens <- update(object = labs_cholesterol_model,
                              subset = !(record_id %in% labs_cholesterol_model_check$influential_ids))
# Influential IDS
labs_cholesterol_model_check$influential_ids
```

```{r labs_cholesterol_3}
# Model comparison
summary(labs_cholesterol_model)
summary(labs_cholesterol_model_sens)
labs_cholesterol_model_check$comparison_table
performance::compare_performance(labs_cholesterol_model, labs_cholesterol_model_sens)
```

```{r labs_cholesterol_4, fig.width=10, fig.height=10}
performance::check_model(labs_cholesterol_model)
performance::check_model(labs_cholesterol_model_sens)
```

```{r labs_cholesterol_5}
# Get EMMs for each group at each visit
labs_cholesterol_emm <- emmeans::emmeans(
    labs_cholesterol_model_sens, 
    ~ allocation_group * visit
)

# Table of marginal means
labs_cholesterol_emm

# Pairwise comparisons: Between groups at each visit
contrast(labs_cholesterol_emm, method = "pairwise", by = "visit", adjust = "bonferroni")

# Pairwise comparisons: Changes over time within each group
contrast(labs_cholesterol_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni")

# Plot of marginal means
plot(labs_cholesterol_emm)
```

```{r labs_cholesterol_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_cholesterol,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_cholesterol_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_cholesterol,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### labs_ldl

```{r labs_ldl_1}
# Plot 1: Raw data
labs_ldl_hist_1 <- data_model %>% 
    #filter(
    #    labs_ldl < 300
    #) %>% 
    ggplot(aes(x = labs_ldl)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_ldl_hist_2 <- data_model %>% 
    #filter(
    #    labs_ldl < 300
    #) %>%
    ggplot(aes(x = log1p(labs_ldl))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_ldl_hist_1 + labs_ldl_hist_2 # library(patchwork)
```

```{r labs_ldl_2}
# LMM
labs_ldl_model <- lmer(labs_ldl ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_ldl_model)

# Sensitivity analysis
labs_ldl_model_check <- sensitivity_check_lmer(
    model = labs_ldl_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_ldl_model_sens <- update(object = labs_ldl_model,
                              subset = !(record_id %in% labs_ldl_model_check$influential_ids))
# Influential IDS
labs_ldl_model_check$influential_ids
```

```{r labs_ldl_3}
# Model comparison
summary(labs_ldl_model)
summary(labs_ldl_model_sens)
labs_ldl_model_check$comparison_table
performance::compare_performance(labs_ldl_model, labs_ldl_model_sens)
```

```{r labs_ldl_4, fig.width=10, fig.height=10}
performance::check_model(labs_ldl_model)
performance::check_model(labs_ldl_model_sens)
```

```{r labs_ldl_5}
# Get EMMs for each group at each visit
labs_ldl_emm <- emmeans::emmeans(
    labs_ldl_model_sens, 
    ~ allocation_group * visit
)

# Table of marginal means
labs_ldl_emm

# Pairwise comparisons: Between groups at each visit
contrast(labs_ldl_emm, method = "pairwise", by = "visit", adjust = "bonferroni")

# Pairwise comparisons: Changes over time within each group
contrast(labs_ldl_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni")

# Plot of marginal means
plot(labs_ldl_emm)
```

```{r labs_ldl_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_ldl,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_ldl_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_ldl,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### labs_hdl

```{r labs_hdl_1}
# Plot 1: Raw data
labs_hdl_hist_1 <- data_model %>% 
    #filter(
    #    labs_hdl < 300
    #) %>% 
    ggplot(aes(x = labs_hdl)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_hdl_hist_2 <- data_model %>% 
    #filter(
    #    labs_hdl < 300
    #) %>%
    ggplot(aes(x = log1p(labs_hdl))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_hdl_hist_1 + labs_hdl_hist_2 # library(patchwork)
```

```{r labs_hdl_2}
# LMM
labs_hdl_model <- lmer(log1p(labs_hdl) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_hdl_model)

# Sensitivity analysis
labs_hdl_model_check <- sensitivity_check_lmer(
    model = labs_hdl_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_hdl_model_sens <- update(object = labs_hdl_model,
                              subset = !(record_id %in% labs_hdl_model_check$influential_ids))
# Influential IDS
labs_hdl_model_check$influential_ids
```

```{r labs_hdl_3}
# Model comparison
summary(labs_hdl_model)
summary(labs_hdl_model_sens)
labs_hdl_model_check$comparison_table
performance::compare_performance(labs_hdl_model, labs_hdl_model_sens)
```

```{r labs_hdl_4, fig.width=10, fig.height=10}
performance::check_model(labs_hdl_model)
performance::check_model(labs_hdl_model_sens)
```

```{r labs_hdl_5}
# Get EMMs for each group at each visit
labs_hdl_emm <- emmeans::emmeans(
    labs_hdl_model_sens, 
    ~ allocation_group * visit
)

# Table of marginal means
labs_hdl_emm

# Pairwise comparisons: Between groups at each visit
contrast(labs_hdl_emm, method = "pairwise", by = "visit", adjust = "bonferroni")

# Pairwise comparisons: Changes over time within each group
contrast(labs_hdl_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni")

# Plot of marginal means
plot(labs_hdl_emm)
```

```{r labs_hdl_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_hdl,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_hdl_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_hdl,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### labs_triglycerides

```{r labs_triglycerides_1}
# Plot 1: Raw data
labs_triglycerides_hist_1 <- data_model %>% 
    #filter(
    #    labs_triglycerides < 300
    #) %>% 
    ggplot(aes(x = labs_triglycerides)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_triglycerides_hist_2 <- data_model %>% 
    #filter(
    #    labs_triglycerides < 300
    #) %>%
    ggplot(aes(x = log1p(labs_triglycerides))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_triglycerides_hist_1 + labs_triglycerides_hist_2 # library(patchwork)
```

```{r labs_triglycerides_2}
# LMM
labs_triglycerides_model <- lmer(log1p(labs_triglycerides) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_triglycerides_model)

# Sensitivity analysis
labs_triglycerides_model_check <- sensitivity_check_lmer(
    model = labs_triglycerides_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_triglycerides_model_sens <- update(object = labs_triglycerides_model,
                              subset = !(record_id %in% labs_triglycerides_model_check$influential_ids))
# Influential IDS
labs_triglycerides_model_check$influential_ids
```

```{r labs_triglycerides_3}
# Model comparison
summary(labs_triglycerides_model)
summary(labs_triglycerides_model_sens)
labs_triglycerides_model_check$comparison_table
performance::compare_performance(labs_triglycerides_model, labs_triglycerides_model_sens)
```

```{r labs_triglycerides_4, fig.width=10, fig.height=10}
performance::check_model(labs_triglycerides_model)
performance::check_model(labs_triglycerides_model_sens)
```

```{r labs_triglycerides_5}
# Get EMMs for each group at each visit
labs_triglycerides_emm <- emmeans::emmeans(
    labs_triglycerides_model_sens, 
    ~ allocation_group * visit
)

# Table of marginal means
labs_triglycerides_emm

# Pairwise comparisons: Between groups at each visit
contrast(labs_triglycerides_emm, method = "pairwise", by = "visit", adjust = "bonferroni")

# Pairwise comparisons: Changes over time within each group
contrast(labs_triglycerides_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni")

# Plot of marginal means
plot(labs_triglycerides_emm, comparisons = TRUE)
```

```{r labs_triglycerides_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_triglycerides,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_triglycerides_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_triglycerides,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```
