---
title: "Ensaio clínico randomizado: efeito da droga vegetal de *Eclipta prostrata* (L.) L. (Asteraceae) no ângulo de fase em adultos com obesidade grau I"
subtitle: "Análise de dados"
author: "Gustavo Santos Paiva Laender Moura"
institute: "Departamento de Clínica Médica, Faculdade de Medicina de Ribeirão Preto da Universidade de São Paulo"
date: today
lang: pt
cache: true
crossref:
  fig-title: "Figura"
  tbl-title: "Tabela"
  title-delim: ":"
  ref-hyperlink: true

language:
  title-block-author: "Autor"
  title-block-institute: "Instituição"
  title-block-date: "Data"
  toc-title: "Sumário"
  ref-title: "Referências"
  appendix-title: "Apêndice"

format:
  html:
    page-layout: full
    toc: true
    toc-depth: 4
    toc-float:
      collapsed: false
      smooth-scroll: true
    #css: styles.css
    code-fold: false
  pdf:
    toc: true
    toc-depth: 4
    pdf-engine: xelatex
    code-overflow: wrap
    code-block-font-size: 80%
---

```{r}
#| label: setup
#| include: false
options(width = 180)

knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  tibble.print_max = Inf,
  tibble.width = Inf)
```

# Bibliotecas e Dados

```{r, echo=FALSE, message=FALSE}

rm(list = ls())
graphics.off()
cat("\014")  # Clear any pending RStudio sessions or temporary files

# Load functions from external script
source("helper_functions.R")

## Load necessary libraries
library(tidyverse)
library(readxl)
library(lubridate)
library(stringr)
library(purrr)
library(here)
library(lme4)
library(lmerTest)
library(skimr)
library(performance)
library(gt)
library(patchwork)
library(emmeans)

# Read Files ----
## Codebooks
codebook_dvep <- read_excel(
    "Codebooks/codebook_dvep.xlsx",
    col_names = TRUE,
    col_types = NULL,
    na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
    trim_ws = TRUE,
    skip = 0, # Number of lines to skip before reading data
    n_max = Inf, # Maximum number of lines to read.
    guess_max = 1000
) %>%
    arrange(index)

#codebook_structure  <- read_csv(
#    "Codebooks/codebook_structure.csv",
#    col_names = TRUE)

#codebook_ncit  <- read_csv(
#    "Codebooks/codebook_ncit.csv",
#    col_names = TRUE)

#codebook_bia <- read_excel(
#    "Codebooks/codebook_bia.xlsx",
#    col_names = TRUE,
#    col_types = NULL,
#    na = c("", "NA", "NI", "UNK", "NASK", "ASKU", "INV"),
#    trim_ws = TRUE,
#    skip = 0, # Number of lines to skip before reading data
#    n_max = Inf, # Maximum number of lines to read.
#    guess_max = 1000
#) %>%
#    arrange(index)

## Data
data <- readRDS("local_files/Data_processed/data.rds")
# data_bia <- readRDS("Data_processed/data_bia.rds")
# data_bia_D1 <- readRDS("Data_processed/data_bia_D1.rds")
# data_bia_D1_mean <- readRDS("Data_processed/data_bia_D1_mean.rds")
# data_bia_D1_raw <- readRDS("Data_processed/data_bia_D1_raw.rds")
# data_bia_D3 <- readRDS("Data_processed/data_bia_D3.rds")
# data_bia_D3_mean <- readRDS("Data_processed/data_bia_D3_mean.rds")
# data_bia_D3_raw <- readRDS("Data_processed/data_bia_D3_raw.rds")
# data_bia_mean <- readRDS("Data_processed/data_bia_mean.rds")
# data_d1_exclusive <- readRDS("Data_processed/data_d1_exclusive.rds")
# data_filtered <- readRDS("Data_processed/data_filtered.rds")
# data_filtered_seca <- readRDS("Data_processed/data_filtered_seca.rds")
#I21_conditions_R <- readRDS("Data_processed/I21_conditions_R.rds")
#I22_drugs_R <- readRDS("Data_processed/I22_drugs_R.rds")
#I27_labs_R <- readRDS("Data_processed/I27_labs_R.rds")
# I29_compliance_new <- readRDS("Data_processed/I29_compliance_new.rds")
#I30_events_R <- readRDS("Data_processed/I30_events_R.rds")

## SUPERTIBBLE
# data_instruments <- readRDS("Data_instruments/data_instruments.rds")

data_model <- readRDS("local_files/Data_processed/data_model.rds") %>% 
    mutate(
        visit = as.factor(visit),
        record_id = as.factor(record_id)
    )
attributes(data_model$kcal)$label <- "Kcal total"
attributes(data_model$labs_quick_index)$label <- "Quick Index"
attributes(data_model$crp_log)$label <- "Log PCR"

data_model_V1V3 <- data_model %>% 
    filter(!visit == "2")

#class(data_model$record_id)
#class(data_model$allocation_group)
#class(data_model$visit)

```
# Estratégia Analítica Geral

Todas as análises foram conduzidas utilizando modelos lineares mistos (LMM), com intercepto aleatório por participante para considerar a estrutura longitudinal dos dados. A variável dependente em cada modelo foi analisada de forma individual, tendo como variáveis explicativas fixas o grupo de alocação, o tempo (visita) e a interação entre ambos. As covariáveis incluídas foram as mesmas em todos os modelos.

Variáveis com distribuição assimétrica à direita foram transformadas por logaritmo natural com deslocamento (+1), conforme apropriado, a fim de aproximar a normalidade dos resíduos. As demais variáveis foram mantidas em sua forma original. Para cada desfecho, os modelos foram ajustados aos dados completos e, adicionalmente, foi realizada uma análise de sensibilidade com exclusão de observações influentes, identificadas com base em medidas diagnósticas específicas.

As médias marginais estimadas (Estimated Marginal Means – EMMs) foram calculadas a partir dos modelos ajustados, com o objetivo de estimar os valores médios ajustados para cada grupo em cada ponto temporal. As comparações pareadas entre grupos em cada visita e entre visitas dentro de cada grupo foram realizadas com correção para múltiplas comparações pelo método de Bonferroni.

Esse procedimento foi replicado de forma consistente para todas as variáveis contínuas incluídas na análise.

# Variáveis coletadas nas três visitas clínicas

Variáveis:

- labs_ast
- labs_alt
- labs_ggt
- labs_alkp
- labs_cholesterol
- labs_ldl 
- labs_hdl 
- labs_triglycerides
- labs_glucose
- labs_hba1c
- labs_insulin
- labs_homa_ir
- labs_quick_index
- abdomen
- bmi
- mean_bp_mean
- evs_score

### Aspartato Aminotransferase

Variável: `labs_ast`

```{r labs_ast_1}
# Plot 1: Raw data
labs_ast_hist_1 <- data_model %>% 
    filter(
        labs_ast < 300
    ) %>% 
    ggplot(aes(x = labs_ast)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_ast_hist_2 <- data_model %>% 
    filter(
        labs_ast < 300
    ) %>%
    ggplot(aes(x = log1p(labs_ast))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_ast_hist_1 + labs_ast_hist_2 # library(patchwork)
```

```{r labs_ast_2}
# LMM
labs_ast_model <- lmer(log1p(labs_ast) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_ast_model)

# Sensitivity analysis
labs_ast_model_check <- sensitivity_check_lmer(
    model = labs_ast_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_ast_model_sens <- update(object = labs_ast_model,
                              subset = !(record_id %in% labs_ast_model_check$influential_ids))
# Influential IDS
labs_ast_model_check$influential_ids
```

#### Resumo dos modelos

```{r labs_ast_3}
# Model comparison
summary(labs_ast_model)
summary(labs_ast_model_sens)
labs_ast_model_check$comparison_table
performance::compare_performance(labs_ast_model, labs_ast_model_sens)
```

```{r labs_ast_4, fig.width=10, fig.height=10}
performance::check_model(labs_ast_model)
performance::check_model(labs_ast_model_sens)
```

#### Médias Marginais Estimadas

```{r labs_ast_raw_emm}
# Get EMMs for each group at each visit
labs_ast_raw_emm <- emmeans::emmeans(
    labs_ast_model, 
    ~ allocation_group * visit
)

labs_ast_raw_emm <- regrid(labs_ast_raw_emm)

# Table of marginal means
# labs_ast_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_ast_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_ast_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_ast_raw_emm, comparisons = TRUE)
```

```{r labs_ast_sens_emm}
# Get EMMs for each group at each visit
labs_ast_emm <- emmeans::emmeans(
    labs_ast_model_sens, 
    ~ allocation_group * visit
)

labs_ast_emm <- regrid(labs_ast_emm)

# Table of marginal means
# labs_ast_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_ast_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_ast_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_ast_emm, comparisons = TRUE)
```

#### Resultado

No modelo ajustado para os níveis de AST, não foram observadas diferenças estatisticamente significativas entre os grupos em nenhum dos três momentos avaliados. Da mesma forma, não houve mudanças significativas ao longo do tempo dentro de cada grupo. A análise de sensibilidade não alterou substancialmente os resultados. As estimativas permaneceram estáveis e as diferenças entre os grupos e ao longo do tempo continuaram não significativas. As estimativas, intervalos de confiança de 95% e valores de p estão apresentados na @tbl-ast.

Table: Diferenças estimadas dos níveis de Aspartato Aminotransferase (AST) entre os grupos de alocação (placebo vs Eclipta) e entre visitas dentro de cada grupo {#tbl-ast}

| Grupo de comparação   | Comparação               | Estimativa | IC 95%              | p-valor |
|-----------------------|--------------------------|------------|----------------------|---------|
| Entre grupos          | Visita 1                 | 0,51       | [-2,33 ; 3,35]       | 0,724   |
| Entre grupos          | Visita 2                 | 0,88       | [-2,24 ; 4,00]       | 0,577   |
| Entre grupos          | Visita 3                 | -0,12      | [-3,54 ; 3,31]       | 0,946   |
| Grupo Placebo         | Visita 1 - Visita 2      | 0,21       | [-2,53 ; 2,95]       | 1,000   |
| Grupo Placebo         | Visita 1 - Visita 3      | 0,23       | [-2,73 ; 3,19]       | 1,000   |
| Grupo Placebo         | Visita 2 - Visita 3      | 0,02       | [-2,98 ; 3,02]       | 1,000   |
| Grupo Eclipta         | Visita 1 - Visita 2      | 0,58       | [-2,25 ; 3,42]       | 1,000   |
| Grupo Eclipta         | Visita 1 - Visita 3      | -0,40      | [-3,49 ; 2,70]       | 1,000   |
| Grupo Eclipta         | Visita 2 - Visita 3      | -0,98      | [-4,20 ; 2,24]       | 1,000   |

```{r labs_ast_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_ast,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group)

data_model %>% 
    filter(
        !(record_id %in% labs_ast_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_ast,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group)
```

### Alanina Aminotransferase

```{r labs_alt_1}
# Plot 1: Raw data
labs_alt_hist_1 <- data_model %>% 
    #filter(
    #    labs_alt < 300
    #) %>% 
    ggplot(aes(x = labs_alt)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_alt_hist_2 <- data_model %>% 
    #filter(
    #    labs_alt < 300
    #) %>%
    ggplot(aes(x = log1p(labs_alt))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_alt_hist_1 + labs_alt_hist_2 # library(patchwork)
```

```{r labs_alt_2}
# LMM
labs_alt_model <- lmer(log1p(labs_alt) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_alt_model)

# Sensitivity analysis
labs_alt_model_check <- sensitivity_check_lmer(
    model = labs_alt_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_alt_model_sens <- update(object = labs_alt_model,
                              subset = !(record_id %in% labs_alt_model_check$influential_ids))
# Influential IDS
labs_alt_model_check$influential_ids
```

#### Resumo dos modelos

```{r labs_alt_3}
# Model comparison
summary(labs_alt_model)
summary(labs_alt_model_sens)
labs_alt_model_check$comparison_table
performance::compare_performance(labs_alt_model, labs_alt_model_sens)
```

```{r labs_alt_4, fig.width=10, fig.height=10}
performance::check_model(labs_alt_model)
performance::check_model(labs_alt_model_sens)
```

#### Médias Marginais Estimadas

```{r labs_alt_raw_emm}
# Get EMMs for each group at each visit
labs_alt_raw_emm <- emmeans::emmeans(
    labs_alt_model, 
    ~ allocation_group * visit
)

labs_alt_raw_emm <- regrid(labs_alt_raw_emm)

# Table of marginal means
# labs_alt_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_alt_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_alt_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_alt_raw_emm, comparisons = TRUE)
```

```{r labs_alt_sens_emm}
# Get EMMs for each group at each visit
labs_alt_emm <- emmeans::emmeans(
    labs_alt_model_sens, 
    ~ allocation_group * visit
)

labs_alt_emm <- regrid(labs_alt_emm)

# Table of marginal means
# labs_alt_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_alt_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_alt_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_alt_emm, comparisons = TRUE)
```

#### Resultado

No modelo ajustado para os níveis de ALT, não foram observadas diferenças estatisticamente significativas entre os grupos em nenhum dos três momentos avaliados. Da mesma forma, não houve mudanças significativas ao longo do tempo dentro de cada grupo. A análise de sensibilidade, realizada com a exclusão das observações influentes, confirmou esses achados. As estimativas permaneceram estáveis e todas as comparações entre os grupos e ao longo do tempo mantiveram-se não significativas. As estimativas, intervalos de confiança de 95% e valores de p estão apresentados na @tbl-alt.

Table: Diferenças estimadas dos níveis de Alanina Aminotransferase (ALT) entre os grupos de alocação (placebo vs Eclipta) e entre visitas dentro de cada grupo {#tbl-alt}

| Grupo de comparação   | Comparação               | Estimativa | IC 95%              | p-valor |
|-----------------------|--------------------------|------------|----------------------|---------|
| Entre grupos          | Visita 1                 | 2,73       | [-2,25 ; 7,72]       | 0,279   |
| Entre grupos          | Visita 2                 | 1,03       | [-4,10 ; 6,16]       | 0,691   |
| Entre grupos          | Visita 3                 | 0,61       | [-5,09 ; 6,32]       | 0,832   |
| Grupo Placebo         | Visita 1 - Visita 2      | 2,16       | [-1,71 ; 6,03]       | 0,533   |
| Grupo Placebo         | Visita 1 - Visita 3      | 0,93       | [-3,35 ; 5,21]       | 1,000   |
| Grupo Placebo         | Visita 2 - Visita 3      | -1,23      | [-5,41 ; 2,96]       | 1,000   |
| Grupo Eclipta         | Visita 1 - Visita 2      | 0,46       | [-3,41 ; 4,32]       | 1,000   |
| Grupo Eclipta         | Visita 1 - Visita 3      | -1,19      | [-5,49 ; 3,11]       | 1,000   |
| Grupo Eclipta         | Visita 2 - Visita 3      | -1,65      | [-6,07 ; 2,78]       | 1,000   |


```{r labs_alt_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_alt,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) + 
    coord_cartesian(ylim = c(10, 80))

data_model %>% 
    filter(
        !(record_id %in% labs_alt_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_alt,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) + 
    coord_cartesian(ylim = c(10, 80))
```

### Gama Glutamil-transferase

Variável: `labs_ggt`

```{r labs_ggt_1}
# Plot 1: Raw data
labs_ggt_hist_1 <- data_model %>% 
    filter(
        labs_ggt < 300
    ) %>% 
    ggplot(aes(x = labs_ggt)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_ggt_hist_2 <- data_model %>% 
    filter(
        labs_ggt < 300
    ) %>%
    ggplot(aes(x = log1p(labs_ggt))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_ggt_hist_1 + labs_ggt_hist_2 # library(patchwork)
```

```{r labs_ggt_2}
# LMM
labs_ggt_model <- lmer(log1p(labs_ggt) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_ggt_model)

# Sensitivity analysis
labs_ggt_model_check <- sensitivity_check_lmer(
    model = labs_ggt_model,
    id_var = "record_id",
    top_n = 7)

# LMM Sensitivity
labs_ggt_model_sens <- update(object = labs_ggt_model,
                              subset = !(record_id %in% labs_ggt_model_check$influential_ids))
# Influential IDS
labs_ggt_model_check$influential_ids
```

#### Resumo dos modelos

```{r labs_ggt_3}
# Model comparison
summary(labs_ggt_model)
summary(labs_ggt_model_sens)
labs_ggt_model_check$comparison_table
performance::compare_performance(labs_ggt_model, labs_ggt_model_sens)
```

```{r labs_ggt_4, fig.width=10, fig.height=10}
performance::check_model(labs_ggt_model)
performance::check_model(labs_ggt_model_sens)
```

#### Médias Marginais Estimadas

```{r labs_ggt_raw_emm}
# Get EMMs for each group at each visit
labs_ggt_raw_emm <- emmeans::emmeans(
    labs_ggt_model, 
    ~ allocation_group * visit
)

labs_ggt_raw_emm <- regrid(labs_ggt_raw_emm)

# Table of marginal means
# labs_ggt_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_ggt_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_ggt_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_ggt_raw_emm, comparisons = TRUE)
```

```{r labs_ggt_sens_emm}
# Get EMMs for each group at each visit
labs_ggt_emm <- emmeans::emmeans(
    labs_ggt_model_sens, 
    ~ allocation_group * visit
)

labs_ggt_emm <- regrid(labs_ggt_emm)

# Table of marginal means
# labs_ggt_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_ggt_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_ggt_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_ggt_emm)
```


#### Resultado

No modelo ajustado para os níveis de Gama Glutamiltransferase (GGT), não foram observadas diferenças estatisticamente significativas entre os grupos em nenhum dos três momentos avaliados. Também não foram identificadas mudanças significativas ao longo do tempo dentro de cada grupo. A análise de sensibilidade, com exclusão das observações influentes, não alterou substancialmente os resultados. As estimativas permaneceram similares, reforçando a ausência de diferenças significativas entre os grupos ou de variações temporais relevantes. As estimativas, intervalos de confiança de 95% e valores de p estão apresentados na @tbl-ggt.

Table: Diferenças estimadas dos níveis de Gama Glutamiltransferase (GGT) entre os grupos de alocação (placebo vs Eclipta) e entre visitas dentro de cada grupo {#tbl-ggt}

| Grupo de comparação   | Comparação               | Estimativa | IC 95%              | p-valor |
|-----------------------|--------------------------|------------|----------------------|---------|
| Entre grupos          | Visita 1                 | -1,57      | [-10,4 ; 7,23]       | 0,724   |
| Entre grupos          | Visita 2                 | -2,95      | [-12,1 ; 6,19]       | 0,523   |
| Entre grupos          | Visita 3                 | -2,43      | [-12,1 ; 7,24]       | 0,619   |
| Grupo Placebo         | Visita 1 - Visita 2      | 0,76       | [-3,48 ; 5,01]       | 1,000   |
| Grupo Placebo         | Visita 1 - Visita 3      | -0,35      | [-5,06 ; 4,35]       | 1,000   |
| Grupo Placebo         | Visita 2 - Visita 3      | -1,12      | [-5,79 ; 3,56]       | 1,000   |
| Grupo Eclipta         | Visita 1 - Visita 2      | -0,62      | [-5,58 ; 4,34]       | 1,000   |
| Grupo Eclipta         | Visita 1 - Visita 3      | -1,22      | [-6,69 ; 4,26]       | 1,000   |
| Grupo Eclipta         | Visita 2 - Visita 3      | -0,60      | [-6,27 ; 5,08]       | 1,000   |


```{r labs_ggt_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_ggt,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_ggt_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_ggt,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### Fosfatase Alcalina

Variável: `labs_alkp`

```{r labs_alkp_1}
# Plot 1: Raw data
labs_alkp_hist_1 <- data_model %>% 
    #filter(
    #    labs_alkp < 300
    #) %>% 
    ggplot(aes(x = labs_alkp)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_alkp_hist_2 <- data_model %>% 
    #filter(
    #    labs_alkp < 300
    #) %>%
    ggplot(aes(x = log1p(labs_alkp))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_alkp_hist_1 + labs_alkp_hist_2 # library(patchwork)
```

```{r labs_alkp_2}
# LMM
labs_alkp_model <- lmer(log1p(labs_alkp) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_alkp_model)

# Sensitivity analysis
labs_alkp_model_check <- sensitivity_check_lmer(
    model = labs_alkp_model,
    id_var = "record_id",
    top_n = 4)

# LMM Sensitivity
labs_alkp_model_sens <- update(object = labs_alkp_model,
                              subset = !(record_id %in% labs_alkp_model_check$influential_ids))
# Influential IDS
labs_alkp_model_check$influential_ids
```

#### Resumo dos modelos

```{r labs_alkp_3}
# Model comparison
summary(labs_alkp_model)
summary(labs_alkp_model_sens)
labs_alkp_model_check$comparison_table
performance::compare_performance(labs_alkp_model, labs_alkp_model_sens)
```

```{r labs_alkp_4, fig.width=10, fig.height=10}
performance::check_model(labs_alkp_model)
performance::check_model(labs_alkp_model_sens)
```

#### Médias Marginais Estimadas

```{r labs_alkp_raw_emm}
# Get EMMs for each group at each visit
labs_alkp_raw_emm <- emmeans::emmeans(
    labs_alkp_model, 
    ~ allocation_group * visit
)

labs_alkp_raw_emm <- regrid(labs_alkp_raw_emm)

# Table of marginal means
# labs_alkp_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_alkp_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_alkp_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_alkp_raw_emm)
```

```{r labs_alkp_sens_emm}
# Get EMMs for each group at each visit
labs_alkp_emm <- emmeans::emmeans(
    labs_alkp_model_sens, 
    ~ allocation_group * visit
)

# Table of marginal means
# labs_alkp_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_alkp_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_alkp_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_alkp_emm)
```

#### Resultado

No modelo ajustado para os níveis de Fosfatase Alcalina (ALP), não foram observadas diferenças estatisticamente significativas entre os grupos em nenhum dos três momentos avaliados. Da mesma forma, as comparações intragrupo ao longo do tempo não indicaram variações significativas. A análise de sensibilidade, realizada com exclusão das observações influentes, manteve os resultados essencialmente inalterados, com estimativas semelhantes e ausência de significância estatística nas comparações entre grupos e entre visitas. As estimativas, intervalos de confiança de 95% e valores de p estão apresentados na @tbl-alkp.

Table: Diferenças estimadas dos níveis de Fosfatase Alcalina (ALP) entre os grupos de alocação (placebo vs Eclipta) e entre visitas dentro de cada grupo {#tbl-alkp}

| Grupo de comparação   | Comparação               | Estimativa | IC 95%              | p-valor |
|-----------------------|--------------------------|------------|----------------------|---------|
| Entre grupos          | Visita 1                 | -2,27      | [-10,6 ; 6,09]       | 0,590   |
| Entre grupos          | Visita 2                 | -3,40      | [-11,8 ; 4,98]       | 0,422   |
| Entre grupos          | Visita 3                 | -2,49      | [-11,2 ; 6,22]       | 0,572   |
| Grupo Placebo         | Visita 1 - Visita 2      | 3,08       | [-1,02 ; 7,18]       | 0,209   |
| Grupo Placebo         | Visita 1 - Visita 3      | 2,01       | [-2,47 ; 6,48]       | 0,829   |
| Grupo Placebo         | Visita 2 - Visita 3      | -1,08      | [-5,48 ; 3,33]       | 1,000   |
| Grupo Eclipta         | Visita 1 - Visita 2      | 1,95       | [-2,65 ; 6,55]       | 0,909   |
| Grupo Eclipta         | Visita 1 - Visita 3      | 1,79       | [-3,21 ; 6,79]       | 1,000   |
| Grupo Eclipta         | Visita 2 - Visita 3      | -0,16      | [-5,28 ; 4,96]       | 1,000   |


```{r labs_alkp_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_alkp,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_alkp_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_alkp,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### Colesterol Total

Variável: `labs_cholesterol`

```{r labs_cholesterol_1}
# Plot 1: Raw data
labs_cholesterol_hist_1 <- data_model %>% 
    #filter(
    #    labs_cholesterol < 300
    #) %>% 
    ggplot(aes(x = labs_cholesterol)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_cholesterol_hist_2 <- data_model %>% 
    #filter(
    #    labs_cholesterol < 300
    #) %>%
    ggplot(aes(x = log1p(labs_cholesterol))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_cholesterol_hist_1 + labs_cholesterol_hist_2 # library(patchwork)
```

```{r labs_cholesterol_2}
# LMM
labs_cholesterol_model <- lmer(labs_cholesterol ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_cholesterol_model)

# Sensitivity analysis
labs_cholesterol_model_check <- sensitivity_check_lmer(
    model = labs_cholesterol_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_cholesterol_model_sens <- update(object = labs_cholesterol_model,
                              subset = !(record_id %in% labs_cholesterol_model_check$influential_ids))
# Influential IDS
labs_cholesterol_model_check$influential_ids
```

#### Resumo dos modelos

```{r labs_cholesterol_3}
# Model comparison
summary(labs_cholesterol_model)
summary(labs_cholesterol_model_sens)
labs_cholesterol_model_check$comparison_table
performance::compare_performance(labs_cholesterol_model, labs_cholesterol_model_sens)
```

```{r labs_cholesterol_4, fig.width=10, fig.height=10}
performance::check_model(labs_cholesterol_model)
performance::check_model(labs_cholesterol_model_sens)
```

#### Médias Marginais Estimadas

```{r labs_cholesterol_raw_emm}
# Get EMMs for each group at each visit
labs_cholesterol_raw_emm <- emmeans::emmeans(
    labs_cholesterol_model, 
    ~ allocation_group * visit
)

labs_cholesterol_raw_emm <- regrid(labs_cholesterol_raw_emm)

# Table of marginal means
# labs_cholesterol_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_cholesterol_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_cholesterol_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_cholesterol_raw_emm, comparisons = TRUE)
```

```{r labs_cholesterol_sens_emm}
# Get EMMs for each group at each visit
labs_cholesterol_emm <- emmeans::emmeans(
    labs_cholesterol_model_sens, 
    ~ allocation_group * visit
)

labs_cholesterol_emm <- regrid(labs_cholesterol_emm)

# Table of marginal means
# labs_cholesterol_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_cholesterol_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_cholesterol_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_cholesterol_emm, comparisons = TRUE)
```

#### Resultado

No modelo ajustado para os níveis de colesterol total, não foram observadas diferenças estatisticamente significativas entre os grupos em nenhum dos três momentos avaliados. As comparações intragrupo ao longo do tempo também não indicaram alterações significativas em nenhum dos grupos. A análise de sensibilidade, realizada com a exclusão de observações influentes, confirmou esses achados. As estimativas se mantiveram estáveis e as diferenças permaneceram não significativas. As estimativas, intervalos de confiança de 95% e valores de p estão apresentados na @tbl-cholesterol.

Table: Diferenças estimadas dos níveis de Colesterol Total entre os grupos de alocação (placebo vs Eclipta) e entre visitas dentro de cada grupo {#tbl-cholesterol}

| Grupo de comparação   | Comparação               | Estimativa | IC 95%               | p-valor |
|-----------------------|--------------------------|------------|-----------------------|---------|
| Entre grupos          | Visita 1                 | 0,72       | [-13,78 ; 15,21]      | 0,922   |
| Entre grupos          | Visita 2                 | 0,83       | [-14,65 ; 16,30]      | 0,915   |
| Entre grupos          | Visita 3                 | 8,48       | [-7,66 ; 24,61]       | 0,300   |
| Grupo Placebo         | Visita 1 - Visita 2      | 5,91       | [-3,92 ; 15,73]       | 0,439   |
| Grupo Placebo         | Visita 1 - Visita 3      | 0,38       | [-10,27 ; 11,03]      | 1,000   |
| Grupo Placebo         | Visita 2 - Visita 3      | -5,53      | [-16,25 ; 5,19]       | 0,638   |
| Grupo Eclipta         | Visita 1 - Visita 2      | 6,02       | [-4,54 ; 16,59]       | 0,504   |
| Grupo Eclipta         | Visita 1 - Visita 3      | 8,14       | [-3,13 ; 19,41]       | 0,245   |
| Grupo Eclipta         | Visita 2 - Visita 3      | 2,12       | [-9,58 ; 13,81]       | 1,000   |


```{r labs_cholesterol_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_cholesterol,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_cholesterol_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_cholesterol,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### LDL Colesterol

Variável: `labs_ldl`

```{r labs_ldl_1}
# Plot 1: Raw data
labs_ldl_hist_1 <- data_model %>% 
    #filter(
    #    labs_ldl < 300
    #) %>% 
    ggplot(aes(x = labs_ldl)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_ldl_hist_2 <- data_model %>% 
    #filter(
    #    labs_ldl < 300
    #) %>%
    ggplot(aes(x = log1p(labs_ldl))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_ldl_hist_1 + labs_ldl_hist_2 # library(patchwork)
```

```{r labs_ldl_2}
# LMM
labs_ldl_model <- lmer(labs_ldl ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_ldl_model)

# Sensitivity analysis
labs_ldl_model_check <- sensitivity_check_lmer(
    model = labs_ldl_model,
    id_var = "record_id",
    top_n = 7)

# LMM Sensitivity
labs_ldl_model_sens <- update(object = labs_ldl_model,
                              subset = !(record_id %in% labs_ldl_model_check$influential_ids))
# Influential IDS
labs_ldl_model_check$influential_ids
```

#### Resumo dos modelos

```{r labs_ldl_3}
# Model comparison
summary(labs_ldl_model)
summary(labs_ldl_model_sens)
labs_ldl_model_check$comparison_table
performance::compare_performance(labs_ldl_model, labs_ldl_model_sens)
```

```{r labs_ldl_4, fig.width=10, fig.height=10}
performance::check_model(labs_ldl_model)
performance::check_model(labs_ldl_model_sens)
```

#### Médias Marginais Estimadas

```{r labs_ldl_raw_emm}
# Get EMMs for each group at each visit
labs_ldl_raw_emm <- emmeans::emmeans(
    labs_ldl_model, 
    ~ allocation_group * visit
)

labs_ldl_raw_emm <- regrid(labs_ldl_raw_emm)

# Table of marginal means
# labs_ldl_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_ldl_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_ldl_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_ldl_raw_emm, comparisons = TRUE)
```

```{r labs_ldl_sens_emm}
# Get EMMs for each group at each visit
labs_ldl_emm <- emmeans::emmeans(
    labs_ldl_model_sens, 
    ~ allocation_group * visit
)

labs_ldl_emm <- regrid(labs_ldl_emm)

# Table of marginal means
# labs_ldl_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_ldl_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_ldl_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_ldl_emm, comparisons = TRUE)
```

#### Resultado

No modelo ajustado para os níveis de LDL-colesterol, não foram observadas diferenças estatisticamente significativas entre os grupos em nenhum dos três momentos avaliados. Da mesma forma, as comparações dentro de cada grupo ao longo do tempo não indicaram alterações significativas. A análise de sensibilidade, com exclusão das observações influentes, não modificou substancialmente os achados: as estimativas permaneceram estáveis e todas as comparações continuaram não significativas. As estimativas, intervalos de confiança de 95% e valores de p estão apresentados na @tbl-ldl.

Table: Diferenças estimadas dos níveis de LDL-colesterol entre os grupos de alocação (placebo vs Eclipta) e entre visitas dentro de cada grupo {#tbl-ldl}

| Grupo de comparação   | Comparação               | Estimativa | IC 95%               | p-valor |
|-----------------------|--------------------------|------------|-----------------------|---------|
| Entre grupos          | Visita 1                 | 3,77       | [-9,63 ; 17,17]       | 0,578   |
| Entre grupos          | Visita 2                 | 1,85       | [-12,56 ; 16,26]      | 0,799   |
| Entre grupos          | Visita 3                 | 9,68       | [-5,41 ; 24,78]       | 0,207   |
| Grupo Placebo         | Visita 1 - Visita 2      | 5,59       | [-4,07 ; 15,26]       | 0,486   |
| Grupo Placebo         | Visita 1 - Visita 3      | 0,02       | [-10,46 ; 10,50]      | 1,000   |
| Grupo Placebo         | Visita 2 - Visita 3      | -5,57      | [-16,13 ; 4,98]       | 0,606   |
| Grupo Eclipta         | Visita 1 - Visita 2      | 3,67       | [-6,71 ; 14,06]       | 1,000   |
| Grupo Eclipta         | Visita 1 - Visita 3      | 5,93       | [-5,15 ; 17,00]       | 0,586   |
| Grupo Eclipta         | Visita 2 - Visita 3      | 2,25       | [-9,26 ; 13,76]       | 1,000   |


```{r labs_ldl_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_ldl,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_ldl_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_ldl,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### HDL Colesterol

Variável: `labs_hdl`

```{r labs_hdl_1}
# Plot 1: Raw data
labs_hdl_hist_1 <- data_model %>% 
    #filter(
    #    labs_hdl < 300
    #) %>% 
    ggplot(aes(x = labs_hdl)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_hdl_hist_2 <- data_model %>% 
    #filter(
    #    labs_hdl < 300
    #) %>%
    ggplot(aes(x = log1p(labs_hdl))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_hdl_hist_1 + labs_hdl_hist_2 # library(patchwork)
```

```{r labs_hdl_2}
# LMM
labs_hdl_model <- lmer(log1p(labs_hdl) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_hdl_model)

# Sensitivity analysis
labs_hdl_model_check <- sensitivity_check_lmer(
    model = labs_hdl_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_hdl_model_sens <- update(object = labs_hdl_model,
                              subset = !(record_id %in% labs_hdl_model_check$influential_ids))
# Influential IDS
labs_hdl_model_check$influential_ids
```

#### Resumo dos modelos

```{r labs_hdl_3}
# Model comparison
summary(labs_hdl_model)
summary(labs_hdl_model_sens)
labs_hdl_model_check$comparison_table
performance::compare_performance(labs_hdl_model, labs_hdl_model_sens)
```

```{r labs_hdl_4, fig.width=10, fig.height=10}
performance::check_model(labs_hdl_model)
performance::check_model(labs_hdl_model_sens)
```

#### Médias Marginais Estimadas

```{r labs_hdl_raw_emm}
# Get EMMs for each group at each visit
labs_hdl_raw_emm <- emmeans::emmeans(
    labs_hdl_model, 
    ~ allocation_group * visit
)

labs_hdl_raw_emm <- regrid(labs_hdl_raw_emm)

# Table of marginal means
# labs_hdl_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_hdl_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_hdl_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_hdl_raw_emm, comparisons = TRUE)
```

```{r labs_hdl_sens_emm}
# Get EMMs for each group at each visit
labs_hdl_emm <- emmeans::emmeans(
    labs_hdl_model_sens, 
    ~ allocation_group * visit
)

labs_hdl_emm <- regrid(labs_hdl_emm)

# Table of marginal means
# labs_hdl_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_hdl_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_hdl_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_hdl_emm, comparisons = TRUE)
```

#### Resultado

No modelo ajustado para os níveis de HDL-colesterol, não foram observadas diferenças estatisticamente significativas entre os grupos em nenhum dos três momentos avaliados. Também não houve mudanças significativas ao longo do tempo dentro de cada grupo. A análise de sensibilidade, conduzida com a exclusão das observações influentes, não alterou substancialmente os resultados. As estimativas permaneceram consistentes e as comparações entre grupos e ao longo do tempo continuaram não significativas. As estimativas, intervalos de confiança de 95% e valores de p estão apresentados na @tbl-hdl.

Table: Diferenças estimadas dos níveis de HDL-colesterol entre os grupos de alocação (placebo vs Eclipta) e entre visitas dentro de cada grupo {#tbl-hdl}

| Grupo de comparação   | Comparação               | Estimativa | IC 95%               | p-valor |
|-----------------------|--------------------------|------------|-----------------------|---------|
| Entre grupos          | Visita 1                 | -3,47      | [-9,15 ; 2,21]        | 0,228   |
| Entre grupos          | Visita 2                 | -2,22      | [-8,14 ; 3,69]        | 0,458   |
| Entre grupos          | Visita 3                 | -1,71      | [-7,83 ; 4,42]        | 0,582   |
| Grupo Placebo         | Visita 1 - Visita 2      | 0,88       | [-2,87 ; 4,64]        | 1,000   |
| Grupo Placebo         | Visita 1 - Visita 3      | 0,99       | [-3,08 ; 5,05]        | 1,000   |
| Grupo Placebo         | Visita 2 - Visita 3      | 0,10       | [-3,96 ; 4,17]        | 1,000   |
| Grupo Eclipta         | Visita 1 - Visita 2      | 2,13       | [-2,12 ; 6,38]        | 0,675   |
| Grupo Eclipta         | Visita 1 - Visita 3      | 2,75       | [-1,74 ; 7,24]        | 0,418   |
| Grupo Eclipta         | Visita 2 - Visita 3      | 0,62       | [-3,99 ; 5,22]        | 1,000   |

```{r labs_hdl_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_hdl,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_hdl_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_hdl,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### Triglicerídeos

Variável: `labs_triglycerides`

```{r labs_triglycerides_1}
# Plot 1: Raw data
labs_triglycerides_hist_1 <- data_model %>% 
    #filter(
    #    labs_triglycerides < 300
    #) %>% 
    ggplot(aes(x = labs_triglycerides)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_triglycerides_hist_2 <- data_model %>% 
    #filter(
    #    labs_triglycerides < 300
    #) %>%
    ggplot(aes(x = log1p(labs_triglycerides))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_triglycerides_hist_1 + labs_triglycerides_hist_2 # library(patchwork)
```

```{r labs_triglycerides_2}
# LMM
labs_triglycerides_model <- lmer(log1p(labs_triglycerides) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_triglycerides_model)

# Sensitivity analysis
labs_triglycerides_model_check <- sensitivity_check_lmer(
    model = labs_triglycerides_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_triglycerides_model_sens <- update(object = labs_triglycerides_model,
                              subset = !(record_id %in% labs_triglycerides_model_check$influential_ids))
# Influential IDS
labs_triglycerides_model_check$influential_ids
```

#### Resumo dos modelos

```{r labs_triglycerides_3}
# Model comparison
summary(labs_triglycerides_model)
summary(labs_triglycerides_model_sens)
labs_triglycerides_model_check$comparison_table
performance::compare_performance(labs_triglycerides_model, labs_triglycerides_model_sens)
```

```{r labs_triglycerides_4, fig.width=10, fig.height=10}
performance::check_model(labs_triglycerides_model)
performance::check_model(labs_triglycerides_model_sens)
```

#### Médias Marginais Estimadas

```{r labs_triglycerides_raw_emm}
# Get EMMs for each group at each visit
labs_triglycerides_raw_emm <- emmeans::emmeans(
    labs_triglycerides_model, 
    ~ allocation_group * visit
)

labs_triglycerides_raw_emm <- regrid(labs_triglycerides_raw_emm)

# Table of marginal means
# labs_triglycerides_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_triglycerides_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_triglycerides_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_triglycerides_raw_emm, comparisons = TRUE)
```

```{r labs_triglycerides_sens_emm}
# Get EMMs for each group at each visit
labs_triglycerides_emm <- emmeans::emmeans(
    labs_triglycerides_model_sens, 
    ~ allocation_group * visit
)

labs_triglycerides_emm <- regrid(labs_triglycerides_emm)

# Table of marginal means
# labs_triglycerides_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_triglycerides_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_triglycerides_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_triglycerides_emm, comparisons = TRUE)
```

#### Resultado

No modelo ajustado para os níveis de triglicerídeos, não foram observadas diferenças estatisticamente significativas entre os grupos em nenhum dos três momentos avaliados. As estimativas entre grupos foram próximas de zero e os intervalos de confiança incluíram o valor nulo, com valores de p superiores a 0,47 em todas as comparações. Da mesma forma, as comparações intragrupo ao longo do tempo não revelaram mudanças significativas em nenhum dos grupos, embora tenha havido uma tendência não significativa de aumento entre a visita 2 e a visita 3 no grupo A (p = 0,078).

A análise de sensibilidade, realizada após a exclusão de observações influentes, manteve os resultados essencialmente inalterados. As estimativas permaneceram próximas das observadas no modelo completo e não houve modificações relevantes nas interpretações. As estimativas, intervalos de confiança de 95% e valores de p estão apresentados na @tbl-triglycerides.

Table: Diferenças estimadas dos níveis de triglicerídeos entre os grupos de alocação (placebo vs Eclipta) e entre visitas dentro de cada grupo {#tbl-triglycerides}

| Grupo de comparação   | Comparação               | Estimativa | IC 95%               | p-valor |
|-----------------------|--------------------------|------------|-----------------------|---------|
| Entre grupos          | Visita 1                 | 2,46       | [-20,8 ; 25,7]        | 0,834   |
| Entre grupos          | Visita 2                 | 9,28       | [-16,6 ; 35,2]        | 0,479   |
| Entre grupos          | Visita 3                 | -3,44      | [-30,8 ; 23,9]        | 0,804   |
| Grupo Placebo         | Visita 1 - Visita 2      | -6,83      | [-25,3 ; 11,7]        | 1,000   |
| Grupo Placebo         | Visita 1 - Visita 3      | -0,97      | [-20,4 ; 18,5]        | 1,000   |
| Grupo Placebo         | Visita 2 - Visita 3      | 5,86       | [-14,3 ; 26,0]        | 1,000   |
| Grupo Eclipta         | Visita 1 - Visita 2      | -0,01      | [-18,8 ; 18,8]        | 1,000   |
| Grupo Eclipta         | Visita 1 - Visita 3      | -6,87      | [-27,7 ; 14,0]        | 1,000   |
| Grupo Eclipta         | Visita 2 - Visita 3      | -6,86      | [-28,4 ; 14,7]        | 1,000   |

```{r labs_triglycerides_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_triglycerides,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_triglycerides_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_triglycerides,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### Glicemia de jejum

Variável: `labs_glucose`

```{r labs_glucose_1}
# Plot 1: Raw data
labs_glucose_hist_1 <- data_model %>% 
    #filter(
    #    labs_glucose < 140
    #) %>% 
    ggplot(aes(x = labs_glucose)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_glucose_hist_2 <- data_model %>% 
    #filter(
    #    labs_glucose < 140
    #) %>%
    ggplot(aes(x = log1p(labs_glucose))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_glucose_hist_1 + labs_glucose_hist_2 # library(patchwork)
```

```{r labs_glucose_2}
# LMM
labs_glucose_model <- lmer(log1p(labs_glucose) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_glucose_model)

# Sensitivity analysis
labs_glucose_model_check <- sensitivity_check_lmer(
    model = labs_glucose_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_glucose_model_sens <- update(object = labs_glucose_model,
                              subset = !(record_id %in% labs_glucose_model_check$influential_ids))
# Influential IDS
labs_glucose_model_check$influential_ids
```

#### Resumo dos modelos

```{r labs_glucose_3}
# Model comparison
summary(labs_glucose_model)
summary(labs_glucose_model_sens)
labs_glucose_model_check$comparison_table
performance::compare_performance(labs_glucose_model, labs_glucose_model_sens)
```

```{r labs_glucose_4, fig.width=10, fig.height=10}
performance::check_model(labs_glucose_model)
performance::check_model(labs_glucose_model_sens)
```

#### Médias Marginais Estimadas

```{r labs_glucose_raw_emm}
# Get EMMs for each group at each visit
labs_glucose_raw_emm <- emmeans::emmeans(
    labs_glucose_model, 
    ~ allocation_group * visit
)

labs_glucose_raw_emm <- regrid(labs_glucose_raw_emm)

# Table of marginal means
# labs_glucose_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_glucose_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_glucose_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_glucose_raw_emm, comparisons = TRUE)
```

```{r labs_glucose_sens_emm}
# Get EMMs for each group at each visit
labs_glucose_emm <- emmeans::emmeans(
    labs_glucose_model_sens, 
    ~ allocation_group * visit
)

labs_glucose_emm <- regrid(labs_glucose_emm)

# Table of marginal means
# labs_glucose_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_glucose_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_glucose_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_glucose_emm, comparisons = TRUE)
```

```{r labs_glucose_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_glucose,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_glucose_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_glucose,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### Hemoglobina Glicosilada

Variável: `labs_hba1c`

```{r labs_hba1c_1}
# Plot 1: Raw data
labs_hba1c_hist_1 <- data_model %>% 
    #filter(
    #    labs_hba1c < 300
    #) %>% 
    ggplot(aes(x = labs_hba1c)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_hba1c_hist_2 <- data_model %>% 
    #filter(
    #    labs_hba1c < 300
    #) %>%
    ggplot(aes(x = log1p(labs_hba1c))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_hba1c_hist_1 + labs_hba1c_hist_2 # library(patchwork)
```

```{r labs_hba1c_2}
# LMM
labs_hba1c_model <- lmer(log1p(labs_hba1c) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_hba1c_model)

# Sensitivity analysis
labs_hba1c_model_check <- sensitivity_check_lmer(
    model = labs_hba1c_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_hba1c_model_sens <- update(object = labs_hba1c_model,
                              subset = !(record_id %in% labs_hba1c_model_check$influential_ids))
# Influential IDS
labs_hba1c_model_check$influential_ids
```

#### Resumo dos modelos

```{r labs_hba1c_3}
# Model comparison
summary(labs_hba1c_model)
summary(labs_hba1c_model_sens)
labs_hba1c_model_check$comparison_table
performance::compare_performance(labs_hba1c_model, labs_hba1c_model_sens)
```

```{r labs_hba1c_4, fig.width=10, fig.height=10}
performance::check_model(labs_hba1c_model)
performance::check_model(labs_hba1c_model_sens)
```

#### Médias Marginais Estimadas

```{r labs_hba1c_raw_emm}
# Get EMMs for each group at each visit
labs_hba1c_raw_emm <- emmeans::emmeans(
    labs_hba1c_model, 
    ~ allocation_group * visit
)

labs_hba1c_raw_emm <- regrid(labs_hba1c_raw_emm)

# Table of marginal means
# labs_hba1c_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_hba1c_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_hba1c_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_hba1c_raw_emm)
```

```{r labs_hba1c_sens_emm}
# Get EMMs for each group at each visit
labs_hba1c_emm <- emmeans::emmeans(
    labs_hba1c_model_sens, 
    ~ allocation_group * visit
)

# Table of marginal means
# labs_hba1c_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_hba1c_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_hba1c_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_hba1c_emm)
```

```{r labs_hba1c_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_hba1c,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_hba1c_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_hba1c,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### Insulina

Variável: `labs_insulin`

```{r labs_insulin_1}
# Plot 1: Raw data
labs_insulin_hist_1 <- data_model %>% 
    #filter(
    #    labs_insulin < 300
    #) %>% 
    ggplot(aes(x = labs_insulin)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_insulin_hist_2 <- data_model %>% 
    #filter(
    #    labs_insulin < 300
    #) %>%
    ggplot(aes(x = log1p(labs_insulin))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_insulin_hist_1 + labs_insulin_hist_2 # library(patchwork)
```

```{r labs_insulin_2}
# LMM
labs_insulin_model <- lmer(log1p(labs_insulin) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_insulin_model)

# Sensitivity analysis
labs_insulin_model_check <- sensitivity_check_lmer(
    model = labs_insulin_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_insulin_model_sens <- update(object = labs_insulin_model,
                              subset = !(record_id %in% labs_insulin_model_check$influential_ids))
# Influential IDS
labs_insulin_model_check$influential_ids
```

#### Resumo dos modelos

```{r labs_insulin_3}
# Model comparison
summary(labs_insulin_model)
summary(labs_insulin_model_sens)
labs_insulin_model_check$comparison_table
performance::compare_performance(labs_insulin_model, labs_insulin_model_sens)
```

```{r labs_insulin_4, fig.width=10, fig.height=10}
performance::check_model(labs_insulin_model)
performance::check_model(labs_insulin_model_sens)
```

#### Médias Marginais Estimadas

```{r labs_insulin_raw_emm}
# Get EMMs for each group at each visit
labs_insulin_raw_emm <- emmeans::emmeans(
    labs_insulin_model, 
    ~ allocation_group * visit
)

labs_insulin_raw_emm <- regrid(labs_insulin_raw_emm)

# Table of marginal means
# labs_insulin_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_insulin_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_insulin_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_insulin_raw_emm, comparisons = TRUE)
```

```{r labs_insulin_sens_emm}
# Get EMMs for each group at each visit
labs_insulin_emm <- emmeans::emmeans(
    labs_insulin_model_sens, 
    ~ allocation_group * visit
)

labs_insulin_emm <- regrid(labs_insulin_emm)

# Table of marginal means
# labs_insulin_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_insulin_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_insulin_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_insulin_emm, comparisons = TRUE)
```

```{r labs_insulin_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_insulin,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_insulin_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_insulin,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### HOMA-IR

Variável: `labs_homa_ir`

```{r labs_homa_ir_1}
# Plot 1: Raw data
labs_homa_ir_hist_1 <- data_model %>% 
    #filter(
    #    labs_homa_ir < 300
    #) %>% 
    ggplot(aes(x = labs_homa_ir)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_homa_ir_hist_2 <- data_model %>% 
    #filter(
    #    labs_homa_ir < 300
    #) %>%
    ggplot(aes(x = log1p(labs_homa_ir))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_homa_ir_hist_1 + labs_homa_ir_hist_2 # library(patchwork)
```

```{r labs_homa_ir_2}
# LMM
labs_homa_ir_model <- lmer(log1p(labs_homa_ir) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_homa_ir_model)

# Sensitivity analysis
labs_homa_ir_model_check <- sensitivity_check_lmer(
    model = labs_homa_ir_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_homa_ir_model_sens <- update(object = labs_homa_ir_model,
                              subset = !(record_id %in% labs_homa_ir_model_check$influential_ids))
# Influential IDS
labs_homa_ir_model_check$influential_ids
```

#### Resumo dos modelos

```{r labs_homa_ir_3}
# Model comparison
summary(labs_homa_ir_model)
summary(labs_homa_ir_model_sens)
labs_homa_ir_model_check$comparison_table
performance::compare_performance(labs_homa_ir_model, labs_homa_ir_model_sens)
```

```{r labs_homa_ir_4, fig.width=10, fig.height=10}
performance::check_model(labs_homa_ir_model)
performance::check_model(labs_homa_ir_model_sens)
```

#### Médias Marginais Estimadas

```{r labs_homa_ir_raw_emm}
# Get EMMs for each group at each visit
labs_homa_ir_raw_emm <- emmeans::emmeans(
    labs_homa_ir_model, 
    ~ allocation_group * visit
)

labs_homa_ir_raw_emm <- regrid(labs_homa_ir_raw_emm)

# Table of marginal means
# labs_homa_ir_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_homa_ir_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_homa_ir_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_homa_ir_raw_emm, comparisons = TRUE)
```

```{r labs_homa_ir_sens_emm}
# Get EMMs for each group at each visit
labs_homa_ir_emm <- emmeans::emmeans(
    labs_homa_ir_model_sens, 
    ~ allocation_group * visit
)

labs_homa_ir_emm <- regrid(labs_homa_ir_emm)

# Table of marginal means
# labs_homa_ir_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_homa_ir_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_homa_ir_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_homa_ir_emm, comparisons = TRUE)
```

```{r labs_homa_ir_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_homa_ir,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_homa_ir_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_homa_ir,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### Índice QUICK

Variável: `labs_quick_index`

```{r labs_quick_index_1}
# Plot 1: Raw data
labs_quick_index_hist_1 <- data_model %>% 
    #filter(
    #    labs_quick_index < 300
    #) %>% 
    ggplot(aes(x = labs_quick_index)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
labs_quick_index_hist_2 <- data_model %>% 
    #filter(
    #    labs_quick_index < 300
    #) %>%
    ggplot(aes(x = log1p(labs_quick_index))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
labs_quick_index_hist_1 + labs_quick_index_hist_2 # library(patchwork)
```

```{r labs_quick_index_2}
# LMM
labs_quick_index_model <- lmer(labs_quick_index ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(labs_quick_index_model)

# Sensitivity analysis
labs_quick_index_model_check <- sensitivity_check_lmer(
    model = labs_quick_index_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
labs_quick_index_model_sens <- update(object = labs_quick_index_model,
                              subset = !(record_id %in% labs_quick_index_model_check$influential_ids))
# Influential IDS
labs_quick_index_model_check$influential_ids
```

#### Resumo dos modelos

```{r labs_quick_index_3}
# Model comparison
summary(labs_quick_index_model)
summary(labs_quick_index_model_sens)
labs_quick_index_model_check$comparison_table
performance::compare_performance(labs_quick_index_model, labs_quick_index_model_sens)
```

```{r labs_quick_index_4, fig.width=10, fig.height=10}
performance::check_model(labs_quick_index_model)
performance::check_model(labs_quick_index_model_sens)
```

#### Médias Marginais Estimadas

```{r labs_quick_index_raw_emm}
# Get EMMs for each group at each visit
labs_quick_index_raw_emm <- emmeans::emmeans(
    labs_quick_index_model, 
    ~ allocation_group * visit
)

labs_quick_index_raw_emm <- regrid(labs_quick_index_raw_emm)

# Table of marginal means
# labs_quick_index_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_quick_index_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_quick_index_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_quick_index_raw_emm, comparisons = TRUE)
```

```{r labs_quick_index_sens_emm}
# Get EMMs for each group at each visit
labs_quick_index_emm <- emmeans::emmeans(
    labs_quick_index_model_sens, 
    ~ allocation_group * visit
)

labs_quick_index_emm <- regrid(labs_quick_index_emm)

# Table of marginal means
# labs_quick_index_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(labs_quick_index_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(labs_quick_index_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(labs_quick_index_emm, comparisons = TRUE)
```

```{r labs_quick_index_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = labs_quick_index,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% labs_quick_index_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = labs_quick_index,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### Circunferência abdominal

Variável: `abdomen`

```{r abdomen_1}
# Plot 1: Raw data
abdomen_hist_1 <- data_model %>% 
    #filter(
    #    abdomen < 300
    #) %>% 
    ggplot(aes(x = abdomen)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
abdomen_hist_2 <- data_model %>% 
    #filter(
    #    abdomen < 300
    #) %>%
    ggplot(aes(x = log1p(abdomen))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
abdomen_hist_1 + abdomen_hist_2 # library(patchwork)
```

```{r abdomen_2}
# LMM
abdomen_model <- lmer(log1p(abdomen) ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(abdomen_model)

# Sensitivity analysis
abdomen_model_check <- sensitivity_check_lmer(
    model = abdomen_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
abdomen_model_sens <- update(object = abdomen_model,
                              subset = !(record_id %in% abdomen_model_check$influential_ids))
# Influential IDS
abdomen_model_check$influential_ids
```

#### Resumo dos modelos

```{r abdomen_3}
# Model comparison
summary(abdomen_model)
summary(abdomen_model_sens)
abdomen_model_check$comparison_table
performance::compare_performance(abdomen_model, abdomen_model_sens)
```

```{r abdomen_4, fig.width=10, fig.height=10}
performance::check_model(abdomen_model)
performance::check_model(abdomen_model_sens)
```

#### Médias Marginais Estimadas

```{r labs_abdomen_raw_emm}
# Get EMMs for each group at each visit
abdomen_raw_emm <- emmeans::emmeans(
    abdomen_model, 
    ~ allocation_group * visit
)

abdomen_raw_emm <- regrid(abdomen_raw_emm)

# Table of marginal means
# abdomen_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(abdomen_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(abdomen_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(abdomen_raw_emm, comparisons = TRUE)
```

```{r abdomen_sens_emm}
# Get EMMs for each group at each visit
abdomen_emm <- emmeans::emmeans(
    abdomen_model_sens, 
    ~ allocation_group * visit
)

abdomen_emm <- regrid(abdomen_emm)

# Table of marginal means
# abdomen_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(abdomen_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(abdomen_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(abdomen_emm)
```

```{r abdomen_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = abdomen,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% abdomen_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = abdomen,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### Índice de Massa Corporal

Variável: `bmi`

```{r bmi_1}
# Plot 1: Raw data
bmi_hist_1 <- data_model %>% 
    #filter(
    #    bmi < 300
    #) %>% 
    ggplot(aes(x = bmi)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
bmi_hist_2 <- data_model %>% 
    #filter(
    #    bmi < 300
    #) %>%
    ggplot(aes(x = log1p(bmi))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
bmi_hist_1 + bmi_hist_2 # library(patchwork)
```

```{r bmi_2}
# LMM
bmi_model <- lmer(bmi ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(bmi_model)

# Sensitivity analysis
bmi_model_check <- sensitivity_check_lmer(
    model = bmi_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
bmi_model_sens <- update(object = bmi_model,
                              subset = !(record_id %in% bmi_model_check$influential_ids))
# Influential IDS
bmi_model_check$influential_ids
```

#### Resumo dos modelos

```{r bmi_3}
# Model comparison
summary(bmi_model)
summary(bmi_model_sens)
bmi_model_check$comparison_table
performance::compare_performance(bmi_model, bmi_model_sens)
```

```{r bmi_4, fig.width=10, fig.height=10}
performance::check_model(bmi_model)
performance::check_model(bmi_model_sens)
```

#### Médias Marginais Estimadas

```{r bmi_raw_emm}
# Get EMMs for each group at each visit
bmi_raw_emm <- emmeans::emmeans(
    bmi_model, 
    ~ allocation_group * visit
)

bmi_raw_emm <- regrid(bmi_raw_emm)

# Table of marginal means
# bmi_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(bmi_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(bmi_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(bmi_raw_emm)
```

```{r bmi_sens_emm}
# Get EMMs for each group at each visit
bmi_emm <- emmeans::emmeans(
    bmi_model_sens, 
    ~ allocation_group * visit
)

bmi_emm <- regrid(bmi_emm)

# Table of marginal means
# bmi_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(bmi_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(bmi_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(bmi_emm)
```

```{r bmi_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = bmi,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% bmi_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = bmi,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### Pressão Arterial Média

Variável: `mean_bp_mean`

```{r mean_bp_mean_1}
# Plot 1: Raw data
mean_bp_mean_hist_1 <- data_model %>% 
    #filter(
    #    mean_bp_mean < 300
    #) %>% 
    ggplot(aes(x = mean_bp_mean)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
mean_bp_mean_hist_2 <- data_model %>% 
    #filter(
    #    mean_bp_mean < 300
    #) %>%
    ggplot(aes(x = log1p(mean_bp_mean))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
mean_bp_mean_hist_1 + mean_bp_mean_hist_2 # library(patchwork)
```

```{r mean_bp_mean_2}
# LMM
mean_bp_mean_model <- lmer(mean_bp_mean ~ allocation_group * visit + (1 | record_id), data = data_model)
check_collinearity(mean_bp_mean_model)

# Sensitivity analysis
mean_bp_mean_model_check <- sensitivity_check_lmer(
    model = mean_bp_mean_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
mean_bp_mean_model_sens <- update(object = mean_bp_mean_model,
                              subset = !(record_id %in% mean_bp_mean_model_check$influential_ids))
# Influential IDS
mean_bp_mean_model_check$influential_ids
```

#### Resumo dos modelos

```{r mean_bp_mean_3}
# Model comparison
summary(mean_bp_mean_model)
summary(mean_bp_mean_model_sens)
mean_bp_mean_model_check$comparison_table
performance::compare_performance(mean_bp_mean_model, mean_bp_mean_model_sens)
```

```{r mean_bp_mean_4, fig.width=10, fig.height=10}
performance::check_model(mean_bp_mean_model)
performance::check_model(mean_bp_mean_model_sens)
```

#### Médias Marginais Estimadas

```{r mean_bp_mean_raw_emm}
# Get EMMs for each group at each visit
mean_bp_mean_raw_emm <- emmeans::emmeans(
    mean_bp_mean_model, 
    ~ allocation_group * visit
)

mean_bp_mean_raw_emm <- regrid(mean_bp_mean_raw_emm)

# Table of marginal means
# mean_bp_mean_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(mean_bp_mean_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(mean_bp_mean_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(mean_bp_mean_raw_emm, comparisons = TRUE)
```

```{r mean_bp_mean_sens_emm}
# Get EMMs for each group at each visit
mean_bp_mean_emm <- emmeans::emmeans(
    mean_bp_mean_model_sens, 
    ~ allocation_group * visit
)

mean_bp_mean_emm <- regrid(mean_bp_mean_emm)

# Table of marginal means
# mean_bp_mean_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(mean_bp_mean_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(mean_bp_mean_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(mean_bp_mean_emm, comparisons = TRUE)
```

```{r mean_bp_mean_6}
ggplot(
    data = data_model, 
    aes(
        x = as.factor(visit),
        y = mean_bp_mean,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model %>% 
    filter(
        !(record_id %in% mean_bp_mean_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = mean_bp_mean,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

### Escore EVS

Variável: `evs_score`

```{r evs_score_1}
# Plot 1: Raw data
evs_score_hist_1 <- data_model %>% 
    filter(
        evs_score >0
    ) %>% 
    ggplot(aes(x = evs_score)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
evs_score_hist_2 <- data_model %>% 
     filter(
        evs_score >0
    ) %>% 
    ggplot(aes(x = log1p(evs_score))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
evs_score_hist_1 + evs_score_hist_2 # library(patchwork)
```

```{r evs_score_2}
# LMM

data_model_evs <- data_model %>%
  filter(evs_score > 0)

evs_score_model <- lmer(log1p(evs_score) ~ allocation_group * visit + (1 | record_id), data = data_model_evs)
check_collinearity(evs_score_model)

# Sensitivity analysis
evs_score_model_check <- sensitivity_check_lmer(
    model = evs_score_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
evs_score_model_sens <- update(object = evs_score_model,
                              subset = !(record_id %in% evs_score_model_check$influential_ids))
# Influential IDS
evs_score_model_check$influential_ids
```

#### Resumo dos modelos

```{r evs_score_3}
# Model comparison
summary(evs_score_model)
summary(evs_score_model_sens)
evs_score_model_check$comparison_table
performance::compare_performance(evs_score_model, evs_score_model_sens)
```

```{r evs_score_4, fig.width=10, fig.height=10}
performance::check_model(evs_score_model)
performance::check_model(evs_score_model_sens)
```

#### Médias Marginais Estimadas

```{r evs_score_raw_emm}
# Get EMMs for each group at each visit
evs_score_raw_emm <- emmeans::emmeans(
    evs_score_model, 
    ~ allocation_group * visit
)

evs_score_raw_emm <- regrid(evs_score_raw_emm)

# Table of marginal means
# evs_score_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(evs_score_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(evs_score_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(evs_score_raw_emm, comparisons = TRUE)
```

```{r evs_score_sens_emm}
# Get EMMs for each group at each visit
evs_score_emm <- emmeans::emmeans(
    evs_score_model_sens, 
    ~ allocation_group * visit
)

evs_score_emm <- regrid(evs_score_emm)

# Table of marginal means
# evs_score_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(evs_score_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(evs_score_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(evs_score_emm, comparisons = TRUE)
```

```{r evs_score_6}
ggplot(
    data = data_model_evs, 
    aes(
        x = as.factor(visit),
        y = evs_score,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))

data_model_evs %>% 
    filter(
        !(record_id %in% evs_score_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = evs_score,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group) 
    #coord_cartesian(ylim = c(10, 150))
```

# Variáveis coletadas na primeira e terceira visitas

### Ângulo de Fase

Variável: `phase_angle`

```{r phase_angle_1}
# Plot 1: Raw data
phase_angle_hist_1 <- data_model_V1V3 %>% 
    filter(
        phase_angle < 300
    ) %>% 
    ggplot(aes(x = phase_angle)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
phase_angle_hist_2 <- data_model_V1V3 %>% 
    filter(
        phase_angle < 300
    ) %>%
    ggplot(aes(x = log1p(phase_angle))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
phase_angle_hist_1 + phase_angle_hist_2 # library(patchwork)
```

```{r phase_angle_2}
# LMM
phase_angle_model <- lmer(log1p(phase_angle) ~ allocation_group * visit + (1 | record_id), data = data_model_V1V3)
check_collinearity(phase_angle_model)

# Sensitivity analysis
phase_angle_model_check <- sensitivity_check_lmer(
    model = phase_angle_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
phase_angle_model_sens <- update(object = phase_angle_model,
                              subset = !(record_id %in% phase_angle_model_check$influential_ids))
# Influential IDS
phase_angle_model_check$influential_ids
```

#### Resumo dos modelos

```{r phase_angle_3}
# Model comparison
summary(phase_angle_model)
summary(phase_angle_model_sens)
phase_angle_model_check$comparison_table
performance::compare_performance(phase_angle_model, phase_angle_model_sens)
```

```{r phase_angle_4, fig.width=10, fig.height=10}
performance::check_model(phase_angle_model)
performance::check_model(phase_angle_model_sens)
```

#### Médias Marginais Estimadas

```{r phase_angle_raw_emm}
# Get EMMs for each group at each visit
phase_angle_raw_emm <- emmeans::emmeans(
    phase_angle_model, 
    ~ allocation_group * visit
)

phase_angle_raw_emm <- regrid(phase_angle_raw_emm)

# Table of marginal means
# phase_angle_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(phase_angle_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(phase_angle_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(phase_angle_raw_emm, comparisons = TRUE)
```

```{r phase_angle_sens_emm}
# Get EMMs for each group at each visit
phase_angle_emm <- emmeans::emmeans(
    phase_angle_model_sens, 
    ~ allocation_group * visit
)

phase_angle_emm <- regrid(phase_angle_emm)

# Table of marginal means
# phase_angle_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(phase_angle_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(phase_angle_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(phase_angle_emm)
```


```{r phase_angle_6}
ggplot(
    data = data_model_V1V3, 
    aes(
        x = as.factor(visit),
        y = phase_angle,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group)

data_model_V1V3 %>% 
    filter(
        !(record_id %in% phase_angle_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = phase_angle,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group)
```

### Reatância

Variável: `reactance`

```{r reactance_1}
# Plot 1: Raw data
reactance_hist_1 <- data_model_V1V3 %>% 
    #filter(
    #    reactance < 300
    #) %>% 
    ggplot(aes(x = reactance)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
reactance_hist_2 <- data_model_V1V3 %>% 
    #filter(
    #    reactance < 300
    #) %>%
    ggplot(aes(x = log1p(reactance))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
reactance_hist_1 + reactance_hist_2 # library(patchwork)
```

```{r reactance_2}
# LMM
reactance_model <- lmer(log1p(reactance) ~ allocation_group * visit + (1 | record_id), data = data_model_V1V3)
check_collinearity(reactance_model)

# Sensitivity analysis
reactance_model_check <- sensitivity_check_lmer(
    model = reactance_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
reactance_model_sens <- update(object = reactance_model,
                              subset = !(record_id %in% reactance_model_check$influential_ids))
# Influential IDS
reactance_model_check$influential_ids
```

#### Resumo dos modelos

```{r reactance_3}
# Model comparison
summary(reactance_model)
summary(reactance_model_sens)
reactance_model_check$comparison_table
performance::compare_performance(reactance_model, reactance_model_sens)
```

```{r reactance_4, fig.width=10, fig.height=10}
performance::check_model(reactance_model)
performance::check_model(reactance_model_sens)
```

#### Médias Marginais Estimadas

```{r reactance_raw_emm}
# Get EMMs for each group at each visit
reactance_raw_emm <- emmeans::emmeans(
    reactance_model, 
    ~ allocation_group * visit
)

reactance_raw_emm <- regrid(reactance_raw_emm)

# Table of marginal means
# reactance_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(reactance_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(reactance_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(reactance_raw_emm, comparisons = TRUE)
```

```{r reactance_sens_emm}
# Get EMMs for each group at each visit
reactance_emm <- emmeans::emmeans(
    reactance_model_sens, 
    ~ allocation_group * visit
)

reactance_emm <- regrid(reactance_emm)

# Table of marginal means
# reactance_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(reactance_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(reactance_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(reactance_emm, comparisons = TRUE)
```


```{r reactance_6}
ggplot(
    data = data_model_V1V3, 
    aes(
        x = as.factor(visit),
        y = reactance,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group)

data_model_V1V3 %>% 
    filter(
        !(record_id %in% reactance_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = reactance,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group)
```

### Resistência

Variável: `resistance`

```{r resistance_1}
# Plot 1: Raw data
resistance_hist_1 <- data_model_V1V3 %>% 
    #filter(
    #    resistance < 300
    #) %>% 
    ggplot(aes(x = resistance)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
resistance_hist_2 <- data_model_V1V3 %>% 
    #filter(
    #    resistance < 300
    #) %>%
    ggplot(aes(x = log1p(resistance))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
resistance_hist_1 + resistance_hist_2 # library(patchwork)
```

```{r resistance_2}
# LMM
resistance_model <- lmer(resistance ~ allocation_group * visit + (1 | record_id), data = data_model_V1V3)
check_collinearity(resistance_model)

# Sensitivity analysis
resistance_model_check <- sensitivity_check_lmer(
    model = resistance_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
resistance_model_sens <- update(object = resistance_model,
                              subset = !(record_id %in% resistance_model_check$influential_ids))
# Influential IDS
resistance_model_check$influential_ids
```

#### Resumo dos modelos

```{r resistance_3}
# Model comparison
summary(resistance_model)
summary(resistance_model_sens)
resistance_model_check$comparison_table
performance::compare_performance(resistance_model, resistance_model_sens)
```

```{r resistance_4, fig.width=10, fig.height=10}
performance::check_model(resistance_model)
performance::check_model(resistance_model_sens)
```

#### Médias Marginais Estimadas

```{r resistance_raw_emm}
# Get EMMs for each group at each visit
resistance_raw_emm <- emmeans::emmeans(
    resistance_model, 
    ~ allocation_group * visit
)

resistance_raw_emm <- regrid(resistance_raw_emm)

# Table of marginal means
# resistance_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(resistance_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(resistance_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(resistance_raw_emm, comparisons = TRUE)
```

```{r resistance_sens_emm}
# Get EMMs for each group at each visit
resistance_emm <- emmeans::emmeans(
    resistance_model_sens, 
    ~ allocation_group * visit
)

resistance_emm <- regrid(resistance_emm)

# Table of marginal means
# resistance_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(resistance_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(resistance_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(resistance_emm, comparisons = TRUE)
```


```{r resistance_6}
ggplot(
    data = data_model_V1V3, 
    aes(
        x = as.factor(visit),
        y = resistance,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group)

data_model_V1V3 %>% 
    filter(
        !(record_id %in% resistance_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = resistance,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group)
```

### Força de Preensão Palmar

Variável: `handgrip`

```{r handgrip_1}
# Plot 1: Raw data
handgrip_hist_1 <- data_model_V1V3 %>% 
    #filter(
    #    handgrip < 300
    #) %>% 
    ggplot(aes(x = handgrip)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
handgrip_hist_2 <- data_model_V1V3 %>% 
    #filter(
    #    handgrip < 300
    #) %>%
    ggplot(aes(x = log1p(handgrip))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
handgrip_hist_1 + handgrip_hist_2 # library(patchwork)
```

```{r handgrip_2}
# LMM
handgrip_model <- lmer(log1p(handgrip) ~ allocation_group * visit + (1 | record_id), data = data_model_V1V3)
check_collinearity(handgrip_model)

# Sensitivity analysis
handgrip_model_check <- sensitivity_check_lmer(
    model = handgrip_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
handgrip_model_sens <- update(object = handgrip_model,
                              subset = !(record_id %in% handgrip_model_check$influential_ids))
# Influential IDS
handgrip_model_check$influential_ids
```

#### Resumo dos modelos

```{r handgrip_3}
# Model comparison
summary(handgrip_model)
summary(handgrip_model_sens)
handgrip_model_check$comparison_table
performance::compare_performance(handgrip_model, handgrip_model_sens)
```

```{r handgrip_4, fig.width=10, fig.height=10}
performance::check_model(handgrip_model)
performance::check_model(handgrip_model_sens)
```

#### Médias Marginais Estimadas

```{r handgrip_raw_emm}
# Get EMMs for each group at each visit
handgrip_raw_emm <- emmeans::emmeans(
    handgrip_model, 
    ~ allocation_group * visit
)

handgrip_raw_emm <- regrid(handgrip_raw_emm)

# Table of marginal means
# handgrip_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(handgrip_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(handgrip_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(handgrip_raw_emm)
```

```{r handgrip_sens_emm}
# Get EMMs for each group at each visit
handgrip_emm <- emmeans::emmeans(
    handgrip_model_sens, 
    ~ allocation_group * visit
)

handgrip_emm <- regrid(handgrip_emm)

# Table of marginal means
# handgrip_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(handgrip_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(handgrip_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(handgrip_emm)
```


```{r handgrip_6}
ggplot(
    data = data_model_V1V3, 
    aes(
        x = as.factor(visit),
        y = handgrip,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group)

data_model_V1V3 %>% 
    filter(
        !(record_id %in% handgrip_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = handgrip,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group)
```

### WHOQOL-Bref

Variável: `whoqol_score_overall`

```{r whoqol_score_overall_1}
# Plot 1: Raw data
whoqol_score_overall_hist_1 <- data_model_V1V3 %>% 
    #filter(
    #    whoqol_score_overall < 300
    #) %>% 
    ggplot(aes(x = whoqol_score_overall)) + 
    geom_histogram(bins = 30, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
whoqol_score_overall_hist_2 <- data_model_V1V3 %>% 
    #filter(
    #    whoqol_score_overall < 300
    #) %>%
    ggplot(aes(x = log1p(whoqol_score_overall))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
whoqol_score_overall_hist_1 + whoqol_score_overall_hist_2 # library(patchwork)
```

```{r whoqol_score_overall_2}
# LMM
whoqol_score_overall_model <- lmer(whoqol_score_overall ~ allocation_group * visit + (1 | record_id), data = data_model_V1V3)
check_collinearity(whoqol_score_overall_model)

# Sensitivity analysis
whoqol_score_overall_model_check <- sensitivity_check_lmer(
    model = whoqol_score_overall_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
whoqol_score_overall_model_sens <- update(object = whoqol_score_overall_model,
                              subset = !(record_id %in% whoqol_score_overall_model_check$influential_ids))
# Influential IDS
whoqol_score_overall_model_check$influential_ids
```

#### Resumo dos modelos

```{r whoqol_score_overall_3}
# Model comparison
summary(whoqol_score_overall_model)
summary(whoqol_score_overall_model_sens)
whoqol_score_overall_model_check$comparison_table
performance::compare_performance(whoqol_score_overall_model, whoqol_score_overall_model_sens)
```

```{r whoqol_score_overall_4, fig.width=10, fig.height=10}
performance::check_model(whoqol_score_overall_model)
performance::check_model(whoqol_score_overall_model_sens)
```

#### Médias Marginais Estimadas

```{r whoqol_score_overall_raw_emm}
# Get EMMs for each group at each visit
whoqol_score_overall_raw_emm <- emmeans::emmeans(
    whoqol_score_overall_model, 
    ~ allocation_group * visit
)

whoqol_score_overall_raw_emm <- regrid(whoqol_score_overall_raw_emm)

# Table of marginal means
# whoqol_score_overall_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(whoqol_score_overall_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(whoqol_score_overall_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(whoqol_score_overall_raw_emm, comparisons = TRUE)
```

```{r whoqol_score_overall_sens_emm}
# Get EMMs for each group at each visit
whoqol_score_overall_emm <- emmeans::emmeans(
    whoqol_score_overall_model_sens, 
    ~ allocation_group * visit
)

whoqol_score_overall_emm <- regrid(whoqol_score_overall_emm)

# Table of marginal means
# whoqol_score_overall_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(whoqol_score_overall_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(whoqol_score_overall_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(whoqol_score_overall_emm, comparisons = TRUE)
```


```{r whoqol_score_overall_6}
ggplot(
    data = data_model_V1V3, 
    aes(
        x = as.factor(visit),
        y = whoqol_score_overall,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group)

data_model_V1V3 %>% 
    filter(
        !(record_id %in% whoqol_score_overall_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = whoqol_score_overall,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group)
```

### Escore DASS Depressão

Variável: `dass_score_depression`

```{r dass_score_depression_1}
# Plot 1: Raw data
dass_score_depression_hist_1 <- data_model_V1V3 %>% 
    #filter(
    #    dass_score_depression < 300
    #) %>% 
    ggplot(aes(x = dass_score_depression)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
dass_score_depression_hist_2 <- data_model_V1V3 %>% 
    #filter(
    #    dass_score_depression < 300
    #) %>%
    ggplot(aes(x = log1p(dass_score_depression))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
dass_score_depression_hist_1 + dass_score_depression_hist_2 # library(patchwork)
```

```{r dass_score_depression_2}
# LMM
dass_score_depression_model <- lmer(dass_score_depression ~ allocation_group * visit + (1 | record_id), data = data_model_V1V3)
check_collinearity(dass_score_depression_model)

# Sensitivity analysis
dass_score_depression_model_check <- sensitivity_check_lmer(
    model = dass_score_depression_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
dass_score_depression_model_sens <- update(object = dass_score_depression_model,
                              subset = !(record_id %in% dass_score_depression_model_check$influential_ids))
# Influential IDS
dass_score_depression_model_check$influential_ids
```

#### Resumo dos modelos

```{r dass_score_depression_3}
# Model comparison
summary(dass_score_depression_model)
summary(dass_score_depression_model_sens)
dass_score_depression_model_check$comparison_table
performance::compare_performance(dass_score_depression_model, dass_score_depression_model_sens)
```

```{r dass_score_depression_4, fig.width=10, fig.height=10}
performance::check_model(dass_score_depression_model)
performance::check_model(dass_score_depression_model_sens)
```

#### Médias Marginais Estimadas

```{r dass_score_depression_raw_emm}
# Get EMMs for each group at each visit
dass_score_depression_raw_emm <- emmeans::emmeans(
    dass_score_depression_model, 
    ~ allocation_group * visit
)

dass_score_depression_raw_emm <- regrid(dass_score_depression_raw_emm)

# Table of marginal means
# dass_score_depression_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(dass_score_depression_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(dass_score_depression_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(dass_score_depression_raw_emm, comparisons = TRUE)
```

```{r dass_score_depression_sens_emm}
# Get EMMs for each group at each visit
dass_score_depression_emm <- emmeans::emmeans(
    dass_score_depression_model_sens, 
    ~ allocation_group * visit
)

dass_score_depression_emm <- regrid(dass_score_depression_emm)

# Table of marginal means
# dass_score_depression_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(dass_score_depression_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(dass_score_depression_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(dass_score_depression_emm, comparisons = TRUE)
```


```{r dass_score_depression_6}
ggplot(
    data = data_model_V1V3, 
    aes(
        x = as.factor(visit),
        y = dass_score_depression,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group)

data_model_V1V3 %>% 
    filter(
        !(record_id %in% dass_score_depression_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = dass_score_depression,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group)
```

### Escore DASS Ansiedade

Variável: `dass_score_anxiety`

```{r dass_score_anxiety_1}
# Plot 1: Raw data
dass_score_anxiety_hist_1 <- data_model_V1V3 %>% 
    #filter(
    #    dass_score_anxiety < 300
    #) %>% 
    ggplot(aes(x = dass_score_anxiety)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
dass_score_anxiety_hist_2 <- data_model_V1V3 %>% 
    #filter(
    #    dass_score_anxiety < 300
    #) %>%
    ggplot(aes(x = log1p(dass_score_anxiety))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
dass_score_anxiety_hist_1 + dass_score_anxiety_hist_2 # library(patchwork)
```

```{r dass_score_anxiety_2}
# LMM
dass_score_anxiety_model <- lmer(dass_score_anxiety ~ allocation_group * visit + (1 | record_id), data = data_model_V1V3)
check_collinearity(dass_score_anxiety_model)

# Sensitivity analysis
dass_score_anxiety_model_check <- sensitivity_check_lmer(
    model = dass_score_anxiety_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
dass_score_anxiety_model_sens <- update(object = dass_score_anxiety_model,
                              subset = !(record_id %in% dass_score_anxiety_model_check$influential_ids))
# Influential IDS
dass_score_anxiety_model_check$influential_ids
```

#### Resumo dos modelos

```{r dass_score_anxiety_3}
# Model comparison
summary(dass_score_anxiety_model)
summary(dass_score_anxiety_model_sens)
dass_score_anxiety_model_check$comparison_table
performance::compare_performance(dass_score_anxiety_model, dass_score_anxiety_model_sens)
```

```{r dass_score_anxiety_4, fig.width=10, fig.height=10}
performance::check_model(dass_score_anxiety_model)
performance::check_model(dass_score_anxiety_model_sens)
```

#### Médias Marginais Estimadas

```{r dass_score_anxiety_raw_emm}
# Get EMMs for each group at each visit
dass_score_anxiety_raw_emm <- emmeans::emmeans(
    dass_score_anxiety_model, 
    ~ allocation_group * visit
)

dass_score_anxiety_raw_emm <- regrid(dass_score_anxiety_raw_emm)

# Table of marginal means
# dass_score_anxiety_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(dass_score_anxiety_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(dass_score_anxiety_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(dass_score_anxiety_raw_emm, comparisons = TRUE)
```

```{r dass_score_anxiety_sens_emm}
# Get EMMs for each group at each visit
dass_score_anxiety_emm <- emmeans::emmeans(
    dass_score_anxiety_model_sens, 
    ~ allocation_group * visit
)

#dass_score_anxiety_emm <- regrid(dass_score_anxiety_emm)

# Table of marginal means
# dass_score_anxiety_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(dass_score_anxiety_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(dass_score_anxiety_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(dass_score_anxiety_emm, comparisons = TRUE)
```


```{r dass_score_anxiety_6}
ggplot(
    data = data_model_V1V3, 
    aes(
        x = as.factor(visit),
        y = dass_score_anxiety,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group)

data_model_V1V3 %>% 
    filter(
        !(record_id %in% dass_score_anxiety_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = dass_score_anxiety,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group)
```

### Escore DASS Estresse

Variável: `dass_score_stress`

```{r dass_score_stress_1}
# Plot 1: Raw data
dass_score_stress_hist_1 <- data_model_V1V3 %>% 
    #filter(
    #    dass_score_stress < 300
    #) %>% 
    ggplot(aes(x = dass_score_stress)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
dass_score_stress_hist_2 <- data_model_V1V3 %>% 
    #filter(
    #    dass_score_stress < 300
    #) %>%
    ggplot(aes(x = log1p(dass_score_stress))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
dass_score_stress_hist_1 + dass_score_stress_hist_2 # library(patchwork)
```

```{r dass_score_stress_2}
# LMM
dass_score_stress_model <- lmer(dass_score_stress ~ allocation_group * visit + (1 | record_id), data = data_model_V1V3)
check_collinearity(dass_score_stress_model)

# Sensitivity analysis
dass_score_stress_model_check <- sensitivity_check_lmer(
    model = dass_score_stress_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
dass_score_stress_model_sens <- update(object = dass_score_stress_model,
                              subset = !(record_id %in% dass_score_stress_model_check$influential_ids))
# Influential IDS
dass_score_stress_model_check$influential_ids
```

#### Resumo dos modelos

```{r dass_score_stress_3}
# Model comparison
summary(dass_score_stress_model)
summary(dass_score_stress_model_sens)
dass_score_stress_model_check$comparison_table
performance::compare_performance(dass_score_stress_model, dass_score_stress_model_sens)
```

```{r dass_score_stress_4, fig.width=10, fig.height=10}
performance::check_model(dass_score_stress_model)
performance::check_model(dass_score_stress_model_sens)
```

#### Médias Marginais Estimadas

```{r dass_score_stress_raw_emm}
# Get EMMs for each group at each visit
dass_score_stress_raw_emm <- emmeans::emmeans(
    dass_score_stress_model, 
    ~ allocation_group * visit
)

dass_score_stress_raw_emm <- regrid(dass_score_stress_raw_emm)

# Table of marginal means
# dass_score_stress_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(dass_score_stress_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(dass_score_stress_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(dass_score_stress_raw_emm, comparisons = TRUE)
```

```{r dass_score_stress_sens_emm}
# Get EMMs for each group at each visit
dass_score_stress_emm <- emmeans::emmeans(
    dass_score_stress_model_sens, 
    ~ allocation_group * visit
)

dass_score_stress_emm <- regrid(dass_score_stress_emm)

# Table of marginal means
# dass_score_stress_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(dass_score_stress_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(dass_score_stress_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(dass_score_stress_emm, comparisons = TRUE)
```


```{r dass_score_stress_6}
ggplot(
    data = data_model_V1V3, 
    aes(
        x = as.factor(visit),
        y = dass_score_stress,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group)

data_model_V1V3 %>% 
    filter(
        !(record_id %in% dass_score_stress_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = dass_score_stress,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group)
```

### ECAP

Variável: `ecap_score`

```{r ecap_score_1}
# Plot 1: Raw data
ecap_score_hist_1 <- data_model_V1V3 %>% 
    #filter(
    #    ecap_score < 300
    #) %>% 
    ggplot(aes(x = ecap_score)) + 
    geom_histogram(bins = 50, fill = "skyblue", color = "black")

# Plot 2: Log-transformed data
ecap_score_hist_2 <- data_model_V1V3 %>% 
    #filter(
    #    ecap_score < 300
    #) %>%
    ggplot(aes(x = log1p(ecap_score))) + 
    geom_histogram(bins = 50, fill = "lightgreen", color = "black")

# Combine side by side
ecap_score_hist_1 + ecap_score_hist_2 # library(patchwork)
```

```{r ecap_score_2}
# LMM
ecap_score_model <- lmer(ecap_score ~ allocation_group * visit + (1 | record_id), data = data_model_V1V3)
check_collinearity(ecap_score_model)

# Sensitivity analysis
ecap_score_model_check <- sensitivity_check_lmer(
    model = ecap_score_model,
    id_var = "record_id",
    top_n = 5)

# LMM Sensitivity
ecap_score_model_sens <- update(object = ecap_score_model,
                              subset = !(record_id %in% ecap_score_model_check$influential_ids))
# Influential IDS
ecap_score_model_check$influential_ids
```

#### Resumo dos modelos

```{r ecap_score_3}
# Model comparison
summary(ecap_score_model)
summary(ecap_score_model_sens)
ecap_score_model_check$comparison_table
performance::compare_performance(ecap_score_model, ecap_score_model_sens)
```

```{r ecap_score_4, fig.width=10, fig.height=10}
performance::check_model(ecap_score_model)
performance::check_model(ecap_score_model_sens)
```

#### Médias Marginais Estimadas

```{r ecap_score_raw_emm}
# Get EMMs for each group at each visit
ecap_score_raw_emm <- emmeans::emmeans(
    ecap_score_model, 
    ~ allocation_group * visit
)

ecap_score_raw_emm <- regrid(ecap_score_raw_emm)

# Table of marginal means
# ecap_score_raw_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(ecap_score_raw_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(ecap_score_raw_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(ecap_score_raw_emm, comparisons = TRUE)
```

```{r ecap_score_sens_emm}
# Get EMMs for each group at each visit
ecap_score_emm <- emmeans::emmeans(
    ecap_score_model_sens, 
    ~ allocation_group * visit
)

ecap_score_emm <- regrid(ecap_score_emm)

# Table of marginal means
# ecap_score_emm

# Pairwise comparisons: Between groups at each visit
emmeans::contrast(ecap_score_emm, method = "pairwise", by = "visit", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Pairwise comparisons: Changes over time within each group
emmeans::contrast(ecap_score_emm, method = "pairwise", by = "allocation_group", adjust = "bonferroni") %>% summary(infer = c(TRUE, TRUE))

# Plot of marginal means
plot(ecap_score_emm, comparisons = TRUE)
```


```{r ecap_score_6}
ggplot(
    data = data_model_V1V3, 
    aes(
        x = as.factor(visit),
        y = ecap_score,
        group = record_id,
    )
) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "All data") +
    facet_wrap(~ allocation_group)

data_model_V1V3 %>% 
    filter(
        !(record_id %in% ecap_score_model_check$influential_ids)
    ) %>% 
    ggplot(
        aes(
            x = as.factor(visit),
            y = ecap_score,
            group = record_id,
        )
    ) +
    geom_line(alpha = 0.5) +
    geom_point(alpha = 0.7) +
    geom_smooth(
        aes(group = allocation_group),
        method = "lm",
        se = TRUE,
        linewidth = 1
    ) +
    labs(title = "Sensitivity analysis") +
    facet_wrap(~ allocation_group)
```

# Informações da Sessão

```{r}
#| label: session_info
sessionInfo()
```

```{r}
#| include: false
#| eval: false
quarto::quarto_render("Outcomes_V1V2V3.qmd", "pdf")
```

