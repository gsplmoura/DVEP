let
    Source = Csv.Document(File.Contents("/Users/gustavosplmoura/Library/Mobile Documents/com~apple~CloudDocs/Medicina/Biblioteca/Research/Data Science/Data Science/DVEP/BIA_xml/xml_to_csv/241002.txt"), [Delimiter = ",", Columns = 64, QuoteStyle = QuoteStyle.None]),
    #"Promoted headers" = Table.PromoteHeaders(Source, [PromoteAllScalars = true]),

    // Step to rename columns by extracting the last node of the original names
    #"Renamed Columns" = Table.RenameColumns(#"Promoted headers", List.Transform(Table.ColumnNames(#"Promoted headers"), each {_, Text.AfterDelimiter(_, " - ", {0, RelativePosition.FromEnd})})),

    // Apply column type changes
    #"Changed column type" = Table.TransformColumnTypes(#"Renamed Columns", {{"File", type text}, {"State", type text}, {"Frequency", Int64.Type}, {"LbhReal", type number}, {"LbhImaginary", type number}, {"RbhReal", type number}, {"RbhImaginary", type number}, {"LahReal", type number}, {"LahImaginary", type number}, {"LlhReal", type number}, {"LlhImaginary", type number}, {"RahReal", type number}, {"RahImaginary", type number}, {"RlhReal", type number}, {"RlhImaginary", type number}, {"TohReal", type number}, {"TohImaginary", type number}, {"MeasurementGUID", type text}, {"TimeStamp", type datetime}, {"MeasuringDevice", Int64.Type}, {"ExportToCSV", Int64.Type}, {"ExportToKIS", Int64.Type}, {"CommentTimeStamp", type datetime}, {"Weight", type number}, {"Height", type number}, {"Waist", type number}, {"Pal", type number}, {"Bmi", type number}, {"TotalEnergyExpediture", type number}, {"RestingEnergyExpediture", type number}, {"EnergyStored", type number}, {"RAverage", type number}, {"XcAverage", type number}, {"FmAbsolute", type number}, {"Fmi", type number}, {"FmRelative", type number}, {"FfmAbsolute", type number}, {"Ffmi", type number}, {"FfmRelative", type number}, {"Body", type number}, {"Torso", type number}, {"RightArm", type number}, {"LeftArm", type number}, {"RightLeg", type number}, {"LeftLeg", type number}, {"Vat", type number}, {"PhaseAngle", type number}, {"Tbw", type number}, {"Ecw", type number}, {"TbwRelative", type number}, {"EcwRelative", type number}, {"EcwBytbw", type number}, {"DeviceId", type text}, {"MatSerial", Int64.Type}, {"GUID", type text}, {"ID", Int64.Type}, {"FirstName", type text}, {"LastName", type text}, {"DateOfBirth", type datetime}, {"Gender", type text}, {"Ethnic", type text}, {"Doctor", type text}, {"LastModified", type datetime}, {"IsDeleted", Int64.Type}}),

    // Step to sort by File (smallest to largest) and TimeStamp (oldest to newest)
    #"Sorted Rows" = Table.Sort(#"Changed column type", {{"File", Order.Ascending}, {"TimeStamp", Order.Ascending}}),

    // Replace empty values in the columns with null to ensure Table.FillDown works
    #"Replaced Empty with Null" = Table.ReplaceValue(#"Sorted Rows", "", null, Replacer.ReplaceValue, {"DateOfBirth", "Gender", "Ethnic", "FirstName", "LastName"}),

    // Step to fill down the patient data
    #"Filled Down" = Table.FillDown(#"Replaced Empty with Null", {"ID", "DateOfBirth", "Gender", "Ethnic", "FirstName", "LastName"}),

    // Step to split Date and Time
    #"Added Date Column" = Table.AddColumn(#"Filled Down", "Date", each DateTime.Date([TimeStamp]), type date),
    #"Added Time Column" = Table.AddColumn(#"Added Date Column", "Time", each DateTime.Time([TimeStamp]), type time),

    // Step to remove unwanted columns (B to Q)
    #"Removed Unnecessary Columns" = Table.RemoveColumns(#"Added Time Column", {"State", "Frequency", "LbhReal", "LbhImaginary", "RbhReal", "RbhImaginary", "LahReal", "LahImaginary", "LlhReal", "LlhImaginary", "RahReal", "RahImaginary", "RlhReal", "RlhImaginary", "TohReal", "TohImaginary", "MeasurementGUID", "MeasuringDevice",	"ExportToCSV",	"ExportToKIS",	"CommentTimeStamp","DeviceId",	"MatSerial",	"GUID", "Doctor",	"LastModified",	"IsDeleted"}),

    // Step to reorder columns
    #"Reordered Columns" = Table.ReorderColumns(#"Removed Unnecessary Columns", {"ID", "Date", "Time", "DateOfBirth", "Gender", "Ethnic", "Weight", "Height", "Bmi", "Waist", "PhaseAngle", "RAverage", "XcAverage", "FmAbsolute", "Fmi", "FmRelative", "FfmAbsolute", "Ffmi", "FfmRelative", "Body", "Torso", "RightArm", "LeftArm", "RightLeg", "LeftLeg", "Vat", "Tbw", "Ecw", "TbwRelative", "EcwRelative", "EcwBytbw", "Pal", "TotalEnergyExpediture", "RestingEnergyExpediture", "EnergyStored", "TimeStamp", "File", "FirstName", "LastName"}),

    // Step to filter out rows where TimeStamp is blank
    #"Filtered Rows" = Table.SelectRows(#"Reordered Columns", each ([PhaseAngle] <> null))
in
    #"Filtered Rows"


__________________________
__________________________

' THEN:

# Add column C (visit) and add the formula to cell C2: =IF(AND(A2=A1,B2=B1),C1,IF(AND(A2=A1,B2<>B1),C1+1,1))

# Add column D (datedif) and add the formula to cell D2: =IF(C2=1,1,IF(AND(C2=2,C1=1),B2-B1,IF(AND(C2=2,C1=2),D1,IF(AND(C2=3,OFFSET(C2,-1,0)=2,OFFSET(C2,-2,0)=1),B2-OFFSET(B2,-2,0),""))))